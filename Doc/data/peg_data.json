{
    "#": "This file was generated by docs_fragment_generator.py",
    "file_input": [
        [
            "file_input",
            "statements? $"
        ],
        [
            "statements",
            "statement+"
        ],
        [
            "statement",
            "compound_stmt | simple_stmts"
        ]
    ],
    "interactive_input": [
        [
            "interactive_input",
            "statement_newline"
        ],
        [
            "statement_newline",
            "compound_stmt NEWLINE | simple_stmts | NEWLINE | $"
        ]
    ],
    "eval_input": [
        [
            "eval_input",
            "expressions NEWLINE* $"
        ],
        [
            "expressions",
            "expression ((',' expression))+ ','? | expression ',' | expression"
        ]
    ],
    "compound_stmt": [
        [
            "compound_stmt",
            "&('def' | '@' | 'async') function_def | &'if' if_stmt | &('class' | '@') class_def | &('with' | 'async') with_stmt | &('for' | 'async') for_stmt | &'try' try_stmt | &'while' while_stmt | match_stmt"
        ]
    ],
    "if_stmt": [
        [
            "if_stmt",
            "invalid_if_stmt | 'if' named_expression ':' block elif_stmt | 'if' named_expression ':' block else_block?"
        ],
        [
            "invalid_if_stmt",
            "'if' named_expression NEWLINE | 'if' named_expression ':' NEWLINE !INDENT"
        ],
        [
            "named_expression",
            "assignment_expression | invalid_named_expression | expression !':='"
        ],
        [
            "assignment_expression",
            "NAME ':=' ~ expression"
        ],
        [
            "invalid_named_expression",
            "expression ':=' expression | NAME '=' bitwise_or !('=' | ':=') | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=')"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "bitwise_and",
            "bitwise_and '&' shift_expr | shift_expr"
        ],
        [
            "shift_expr",
            "shift_expr '<<' sum | shift_expr '>>' sum | sum"
        ],
        [
            "sum",
            "sum '+' term | sum '-' term | term"
        ],
        [
            "term",
            "term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor"
        ],
        [
            "factor",
            "'+' factor | '-' factor | '~' factor | power"
        ],
        [
            "power",
            "await_primary '**' factor | await_primary"
        ],
        [
            "await_primary",
            "'await' primary | primary"
        ],
        [
            "primary",
            "primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom"
        ],
        [
            "genexp",
            "'(' (assignment_expression | expression !':=') for_if_clauses ')' | invalid_comprehension"
        ],
        [
            "for_if_clauses",
            "for_if_clause+"
        ],
        [
            "for_if_clause",
            "'async' 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | invalid_for_target"
        ],
        [
            "star_targets",
            "star_target !',' | star_target ((',' star_target))* ','?"
        ],
        [
            "star_target",
            "'*' (!'*' star_target) | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "slices",
            "slice !',' | ','.(slice | starred_expression)+ ','?"
        ],
        [
            "slice",
            "expression? ':' expression? [':' expression?] | named_expression"
        ],
        [
            "starred_expression",
            "invalid_starred_expression | '*' expression"
        ],
        [
            "invalid_starred_expression",
            "'*' expression '=' expression"
        ],
        [
            "arguments",
            "args ','? &')' | invalid_arguments"
        ],
        [
            "args",
            "','.(starred_expression | (assignment_expression | expression !':=') !'=')+ [',' kwargs] | kwargs"
        ],
        [
            "kwargs",
            "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+"
        ],
        [
            "kwarg_or_starred",
            "invalid_kwarg | NAME '=' expression | starred_expression"
        ],
        [
            "invalid_kwarg",
            "('True' | 'False' | 'None') '=' | NAME '=' expression for_if_clauses | !(NAME '=') expression '=' | '**' expression '=' expression"
        ],
        [
            "kwarg_or_double_starred",
            "invalid_kwarg | NAME '=' expression | '**' expression"
        ],
        [
            "invalid_arguments",
            "((','.(starred_expression | (assignment_expression | expression !':=') !'=')+ ',' kwargs) | kwargs) ',' '*' | expression for_if_clauses ',' [args | expression for_if_clauses] | NAME '=' expression for_if_clauses | [(args ',')] NAME '=' &(',' | ')') | args for_if_clauses | args ',' expression for_if_clauses | args ',' args"
        ],
        [
            "atom",
            "NAME | 'True' | 'False' | 'None' | &(STRING | FSTRING_START) strings | NUMBER | &'(' (tuple | group | genexp) | &'[' (list | listcomp) | &'{' (dict | set | dictcomp | setcomp) | '...'"
        ],
        [
            "strings",
            "((fstring | string))+"
        ],
        [
            "fstring",
            "FSTRING_START fstring_middle* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' (yield_expr | star_expressions) '='? fstring_conversion? fstring_full_format_spec? '}' | invalid_replacement_field"
        ],
        [
            "yield_expr",
            "'yield' 'from' expression | 'yield' star_expressions?"
        ],
        [
            "star_expressions",
            "star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' fstring_format_spec*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "invalid_replacement_field",
            "'{' '=' | '{' '!' | '{' ':' | '{' '}' | '{' !(yield_expr | star_expressions) | '{' (yield_expr | star_expressions) !('=' | '!' | ':' | '}') | '{' (yield_expr | star_expressions) '=' !('!' | ':' | '}') | '{' (yield_expr | star_expressions) '='? invalid_conversion_character | '{' (yield_expr | star_expressions) '='? ['!' NAME] !(':' | '}') | '{' (yield_expr | star_expressions) '='? ['!' NAME] ':' fstring_format_spec* !'}' | '{' (yield_expr | star_expressions) '='? ['!' NAME] !'}'"
        ],
        [
            "invalid_conversion_character",
            "'!' &(':' | '}') | '!' !NAME"
        ],
        [
            "string",
            "STRING"
        ],
        [
            "tuple",
            "'(' [star_named_expression ',' star_named_expressions?] ')'"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "star_named_expressions",
            "','.star_named_expression+ ','?"
        ],
        [
            "group",
            "'(' (yield_expr | named_expression) ')' | invalid_group"
        ],
        [
            "invalid_group",
            "'(' starred_expression ')' | '(' '**' expression ')'"
        ],
        [
            "list",
            "'[' star_named_expressions? ']'"
        ],
        [
            "listcomp",
            "'[' named_expression for_if_clauses ']' | invalid_comprehension"
        ],
        [
            "invalid_comprehension",
            "('[' | '(' | '{') starred_expression for_if_clauses | ('[' | '{') star_named_expression ',' star_named_expressions for_if_clauses | ('[' | '{') star_named_expression ',' for_if_clauses"
        ],
        [
            "dict",
            "'{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'"
        ],
        [
            "double_starred_kvpairs",
            "','.double_starred_kvpair+ ','?"
        ],
        [
            "double_starred_kvpair",
            "'**' bitwise_or | kvpair"
        ],
        [
            "kvpair",
            "expression ':' expression"
        ],
        [
            "invalid_double_starred_kvpairs",
            "','.double_starred_kvpair+ ',' invalid_kvpair | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "invalid_kvpair",
            "expression !(':') | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "set",
            "'{' star_named_expressions '}'"
        ],
        [
            "dictcomp",
            "'{' kvpair for_if_clauses '}' | invalid_dict_comprehension"
        ],
        [
            "invalid_dict_comprehension",
            "'{' '**' bitwise_or for_if_clauses '}'"
        ],
        [
            "setcomp",
            "'{' named_expression for_if_clauses '}' | invalid_comprehension"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' star_targets_tuple_seq? ')' | '[' star_targets_list_seq? ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target ((',' star_target))+ ','? | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "','.star_target+ ','?"
        ],
        [
            "disjunction",
            "conjunction (('or' conjunction))+ | conjunction"
        ],
        [
            "conjunction",
            "inversion (('and' inversion))+ | inversion"
        ],
        [
            "inversion",
            "'not' inversion | comparison"
        ],
        [
            "comparison",
            "bitwise_or compare_op_bitwise_or_pair+ | bitwise_or"
        ],
        [
            "compare_op_bitwise_or_pair",
            "eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or"
        ],
        [
            "eq_bitwise_or",
            "'==' bitwise_or"
        ],
        [
            "noteq_bitwise_or",
            "('!=') bitwise_or"
        ],
        [
            "lte_bitwise_or",
            "'<=' bitwise_or"
        ],
        [
            "lt_bitwise_or",
            "'<' bitwise_or"
        ],
        [
            "gte_bitwise_or",
            "'>=' bitwise_or"
        ],
        [
            "gt_bitwise_or",
            "'>' bitwise_or"
        ],
        [
            "notin_bitwise_or",
            "'not' 'in' bitwise_or"
        ],
        [
            "in_bitwise_or",
            "'in' bitwise_or"
        ],
        [
            "isnot_bitwise_or",
            "'is' 'not' bitwise_or"
        ],
        [
            "is_bitwise_or",
            "'is' bitwise_or"
        ],
        [
            "invalid_for_target",
            "'async'? 'for' star_expressions"
        ],
        [
            "block",
            "NEWLINE INDENT statements DEDENT | simple_stmts | invalid_block"
        ],
        [
            "statements",
            "statement+"
        ],
        [
            "statement",
            "compound_stmt | simple_stmts"
        ],
        [
            "invalid_block",
            "NEWLINE !INDENT"
        ],
        [
            "elif_stmt",
            "invalid_elif_stmt | 'elif' named_expression ':' block elif_stmt | 'elif' named_expression ':' block else_block?"
        ],
        [
            "invalid_elif_stmt",
            "'elif' named_expression NEWLINE | 'elif' named_expression ':' NEWLINE !INDENT"
        ],
        [
            "else_block",
            "invalid_else_stmt | 'else' &&':' block"
        ],
        [
            "invalid_else_stmt",
            "'else' ':' NEWLINE !INDENT"
        ]
    ],
    "while_stmt": [
        [
            "while_stmt",
            "invalid_while_stmt | 'while' named_expression ':' block else_block?"
        ],
        [
            "invalid_while_stmt",
            "'while' named_expression NEWLINE | 'while' named_expression ':' NEWLINE !INDENT"
        ],
        [
            "named_expression",
            "assignment_expression | invalid_named_expression | expression !':='"
        ],
        [
            "assignment_expression",
            "NAME ':=' ~ expression"
        ],
        [
            "invalid_named_expression",
            "expression ':=' expression | NAME '=' bitwise_or !('=' | ':=') | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=')"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "bitwise_and",
            "bitwise_and '&' shift_expr | shift_expr"
        ],
        [
            "shift_expr",
            "shift_expr '<<' sum | shift_expr '>>' sum | sum"
        ],
        [
            "sum",
            "sum '+' term | sum '-' term | term"
        ],
        [
            "term",
            "term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor"
        ],
        [
            "factor",
            "'+' factor | '-' factor | '~' factor | power"
        ],
        [
            "power",
            "await_primary '**' factor | await_primary"
        ],
        [
            "await_primary",
            "'await' primary | primary"
        ],
        [
            "primary",
            "primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom"
        ],
        [
            "genexp",
            "'(' (assignment_expression | expression !':=') for_if_clauses ')' | invalid_comprehension"
        ],
        [
            "for_if_clauses",
            "for_if_clause+"
        ],
        [
            "for_if_clause",
            "'async' 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | invalid_for_target"
        ],
        [
            "star_targets",
            "star_target !',' | star_target ((',' star_target))* ','?"
        ],
        [
            "star_target",
            "'*' (!'*' star_target) | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "slices",
            "slice !',' | ','.(slice | starred_expression)+ ','?"
        ],
        [
            "slice",
            "expression? ':' expression? [':' expression?] | named_expression"
        ],
        [
            "starred_expression",
            "invalid_starred_expression | '*' expression"
        ],
        [
            "invalid_starred_expression",
            "'*' expression '=' expression"
        ],
        [
            "arguments",
            "args ','? &')' | invalid_arguments"
        ],
        [
            "args",
            "','.(starred_expression | (assignment_expression | expression !':=') !'=')+ [',' kwargs] | kwargs"
        ],
        [
            "kwargs",
            "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+"
        ],
        [
            "kwarg_or_starred",
            "invalid_kwarg | NAME '=' expression | starred_expression"
        ],
        [
            "invalid_kwarg",
            "('True' | 'False' | 'None') '=' | NAME '=' expression for_if_clauses | !(NAME '=') expression '=' | '**' expression '=' expression"
        ],
        [
            "kwarg_or_double_starred",
            "invalid_kwarg | NAME '=' expression | '**' expression"
        ],
        [
            "invalid_arguments",
            "((','.(starred_expression | (assignment_expression | expression !':=') !'=')+ ',' kwargs) | kwargs) ',' '*' | expression for_if_clauses ',' [args | expression for_if_clauses] | NAME '=' expression for_if_clauses | [(args ',')] NAME '=' &(',' | ')') | args for_if_clauses | args ',' expression for_if_clauses | args ',' args"
        ],
        [
            "atom",
            "NAME | 'True' | 'False' | 'None' | &(STRING | FSTRING_START) strings | NUMBER | &'(' (tuple | group | genexp) | &'[' (list | listcomp) | &'{' (dict | set | dictcomp | setcomp) | '...'"
        ],
        [
            "strings",
            "((fstring | string))+"
        ],
        [
            "fstring",
            "FSTRING_START fstring_middle* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' (yield_expr | star_expressions) '='? fstring_conversion? fstring_full_format_spec? '}' | invalid_replacement_field"
        ],
        [
            "yield_expr",
            "'yield' 'from' expression | 'yield' star_expressions?"
        ],
        [
            "star_expressions",
            "star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' fstring_format_spec*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "invalid_replacement_field",
            "'{' '=' | '{' '!' | '{' ':' | '{' '}' | '{' !(yield_expr | star_expressions) | '{' (yield_expr | star_expressions) !('=' | '!' | ':' | '}') | '{' (yield_expr | star_expressions) '=' !('!' | ':' | '}') | '{' (yield_expr | star_expressions) '='? invalid_conversion_character | '{' (yield_expr | star_expressions) '='? ['!' NAME] !(':' | '}') | '{' (yield_expr | star_expressions) '='? ['!' NAME] ':' fstring_format_spec* !'}' | '{' (yield_expr | star_expressions) '='? ['!' NAME] !'}'"
        ],
        [
            "invalid_conversion_character",
            "'!' &(':' | '}') | '!' !NAME"
        ],
        [
            "string",
            "STRING"
        ],
        [
            "tuple",
            "'(' [star_named_expression ',' star_named_expressions?] ')'"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "star_named_expressions",
            "','.star_named_expression+ ','?"
        ],
        [
            "group",
            "'(' (yield_expr | named_expression) ')' | invalid_group"
        ],
        [
            "invalid_group",
            "'(' starred_expression ')' | '(' '**' expression ')'"
        ],
        [
            "list",
            "'[' star_named_expressions? ']'"
        ],
        [
            "listcomp",
            "'[' named_expression for_if_clauses ']' | invalid_comprehension"
        ],
        [
            "invalid_comprehension",
            "('[' | '(' | '{') starred_expression for_if_clauses | ('[' | '{') star_named_expression ',' star_named_expressions for_if_clauses | ('[' | '{') star_named_expression ',' for_if_clauses"
        ],
        [
            "dict",
            "'{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'"
        ],
        [
            "double_starred_kvpairs",
            "','.double_starred_kvpair+ ','?"
        ],
        [
            "double_starred_kvpair",
            "'**' bitwise_or | kvpair"
        ],
        [
            "kvpair",
            "expression ':' expression"
        ],
        [
            "invalid_double_starred_kvpairs",
            "','.double_starred_kvpair+ ',' invalid_kvpair | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "invalid_kvpair",
            "expression !(':') | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "set",
            "'{' star_named_expressions '}'"
        ],
        [
            "dictcomp",
            "'{' kvpair for_if_clauses '}' | invalid_dict_comprehension"
        ],
        [
            "invalid_dict_comprehension",
            "'{' '**' bitwise_or for_if_clauses '}'"
        ],
        [
            "setcomp",
            "'{' named_expression for_if_clauses '}' | invalid_comprehension"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' star_targets_tuple_seq? ')' | '[' star_targets_list_seq? ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target ((',' star_target))+ ','? | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "','.star_target+ ','?"
        ],
        [
            "disjunction",
            "conjunction (('or' conjunction))+ | conjunction"
        ],
        [
            "conjunction",
            "inversion (('and' inversion))+ | inversion"
        ],
        [
            "inversion",
            "'not' inversion | comparison"
        ],
        [
            "comparison",
            "bitwise_or compare_op_bitwise_or_pair+ | bitwise_or"
        ],
        [
            "compare_op_bitwise_or_pair",
            "eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or"
        ],
        [
            "eq_bitwise_or",
            "'==' bitwise_or"
        ],
        [
            "noteq_bitwise_or",
            "('!=') bitwise_or"
        ],
        [
            "lte_bitwise_or",
            "'<=' bitwise_or"
        ],
        [
            "lt_bitwise_or",
            "'<' bitwise_or"
        ],
        [
            "gte_bitwise_or",
            "'>=' bitwise_or"
        ],
        [
            "gt_bitwise_or",
            "'>' bitwise_or"
        ],
        [
            "notin_bitwise_or",
            "'not' 'in' bitwise_or"
        ],
        [
            "in_bitwise_or",
            "'in' bitwise_or"
        ],
        [
            "isnot_bitwise_or",
            "'is' 'not' bitwise_or"
        ],
        [
            "is_bitwise_or",
            "'is' bitwise_or"
        ],
        [
            "invalid_for_target",
            "'async'? 'for' star_expressions"
        ],
        [
            "block",
            "NEWLINE INDENT statements DEDENT | simple_stmts | invalid_block"
        ],
        [
            "statements",
            "statement+"
        ],
        [
            "statement",
            "compound_stmt | simple_stmts"
        ],
        [
            "invalid_block",
            "NEWLINE !INDENT"
        ],
        [
            "else_block",
            "invalid_else_stmt | 'else' &&':' block"
        ],
        [
            "invalid_else_stmt",
            "'else' ':' NEWLINE !INDENT"
        ]
    ],
    "for_stmt": [
        [
            "for_stmt",
            "invalid_for_stmt | 'for' star_targets 'in' ~ star_expressions ':' TYPE_COMMENT? block else_block? | 'async' 'for' star_targets 'in' ~ star_expressions ':' TYPE_COMMENT? block else_block? | invalid_for_target"
        ],
        [
            "invalid_for_stmt",
            "'async'? 'for' star_targets 'in' star_expressions NEWLINE | 'async'? 'for' star_targets 'in' star_expressions ':' NEWLINE !INDENT"
        ],
        [
            "star_targets",
            "star_target !',' | star_target ((',' star_target))* ','?"
        ],
        [
            "star_target",
            "'*' (!'*' star_target) | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "slices",
            "slice !',' | ','.(slice | starred_expression)+ ','?"
        ],
        [
            "slice",
            "expression? ':' expression? [':' expression?] | named_expression"
        ],
        [
            "named_expression",
            "assignment_expression | invalid_named_expression | expression !':='"
        ],
        [
            "assignment_expression",
            "NAME ':=' ~ expression"
        ],
        [
            "invalid_named_expression",
            "expression ':=' expression | NAME '=' bitwise_or !('=' | ':=') | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=')"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "bitwise_and",
            "bitwise_and '&' shift_expr | shift_expr"
        ],
        [
            "shift_expr",
            "shift_expr '<<' sum | shift_expr '>>' sum | sum"
        ],
        [
            "sum",
            "sum '+' term | sum '-' term | term"
        ],
        [
            "term",
            "term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor"
        ],
        [
            "factor",
            "'+' factor | '-' factor | '~' factor | power"
        ],
        [
            "power",
            "await_primary '**' factor | await_primary"
        ],
        [
            "await_primary",
            "'await' primary | primary"
        ],
        [
            "primary",
            "primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom"
        ],
        [
            "genexp",
            "'(' (assignment_expression | expression !':=') for_if_clauses ')' | invalid_comprehension"
        ],
        [
            "for_if_clauses",
            "for_if_clause+"
        ],
        [
            "for_if_clause",
            "'async' 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | invalid_for_target"
        ],
        [
            "disjunction",
            "conjunction (('or' conjunction))+ | conjunction"
        ],
        [
            "conjunction",
            "inversion (('and' inversion))+ | inversion"
        ],
        [
            "inversion",
            "'not' inversion | comparison"
        ],
        [
            "comparison",
            "bitwise_or compare_op_bitwise_or_pair+ | bitwise_or"
        ],
        [
            "compare_op_bitwise_or_pair",
            "eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or"
        ],
        [
            "eq_bitwise_or",
            "'==' bitwise_or"
        ],
        [
            "noteq_bitwise_or",
            "('!=') bitwise_or"
        ],
        [
            "lte_bitwise_or",
            "'<=' bitwise_or"
        ],
        [
            "lt_bitwise_or",
            "'<' bitwise_or"
        ],
        [
            "gte_bitwise_or",
            "'>=' bitwise_or"
        ],
        [
            "gt_bitwise_or",
            "'>' bitwise_or"
        ],
        [
            "notin_bitwise_or",
            "'not' 'in' bitwise_or"
        ],
        [
            "in_bitwise_or",
            "'in' bitwise_or"
        ],
        [
            "isnot_bitwise_or",
            "'is' 'not' bitwise_or"
        ],
        [
            "is_bitwise_or",
            "'is' bitwise_or"
        ],
        [
            "invalid_for_target",
            "'async'? 'for' star_expressions"
        ],
        [
            "star_expressions",
            "star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "invalid_comprehension",
            "('[' | '(' | '{') starred_expression for_if_clauses | ('[' | '{') star_named_expression ',' star_named_expressions for_if_clauses | ('[' | '{') star_named_expression ',' for_if_clauses"
        ],
        [
            "starred_expression",
            "invalid_starred_expression | '*' expression"
        ],
        [
            "invalid_starred_expression",
            "'*' expression '=' expression"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "star_named_expressions",
            "','.star_named_expression+ ','?"
        ],
        [
            "arguments",
            "args ','? &')' | invalid_arguments"
        ],
        [
            "args",
            "','.(starred_expression | (assignment_expression | expression !':=') !'=')+ [',' kwargs] | kwargs"
        ],
        [
            "kwargs",
            "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+"
        ],
        [
            "kwarg_or_starred",
            "invalid_kwarg | NAME '=' expression | starred_expression"
        ],
        [
            "invalid_kwarg",
            "('True' | 'False' | 'None') '=' | NAME '=' expression for_if_clauses | !(NAME '=') expression '=' | '**' expression '=' expression"
        ],
        [
            "kwarg_or_double_starred",
            "invalid_kwarg | NAME '=' expression | '**' expression"
        ],
        [
            "invalid_arguments",
            "((','.(starred_expression | (assignment_expression | expression !':=') !'=')+ ',' kwargs) | kwargs) ',' '*' | expression for_if_clauses ',' [args | expression for_if_clauses] | NAME '=' expression for_if_clauses | [(args ',')] NAME '=' &(',' | ')') | args for_if_clauses | args ',' expression for_if_clauses | args ',' args"
        ],
        [
            "atom",
            "NAME | 'True' | 'False' | 'None' | &(STRING | FSTRING_START) strings | NUMBER | &'(' (tuple | group | genexp) | &'[' (list | listcomp) | &'{' (dict | set | dictcomp | setcomp) | '...'"
        ],
        [
            "strings",
            "((fstring | string))+"
        ],
        [
            "fstring",
            "FSTRING_START fstring_middle* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' (yield_expr | star_expressions) '='? fstring_conversion? fstring_full_format_spec? '}' | invalid_replacement_field"
        ],
        [
            "yield_expr",
            "'yield' 'from' expression | 'yield' star_expressions?"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' fstring_format_spec*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "invalid_replacement_field",
            "'{' '=' | '{' '!' | '{' ':' | '{' '}' | '{' !(yield_expr | star_expressions) | '{' (yield_expr | star_expressions) !('=' | '!' | ':' | '}') | '{' (yield_expr | star_expressions) '=' !('!' | ':' | '}') | '{' (yield_expr | star_expressions) '='? invalid_conversion_character | '{' (yield_expr | star_expressions) '='? ['!' NAME] !(':' | '}') | '{' (yield_expr | star_expressions) '='? ['!' NAME] ':' fstring_format_spec* !'}' | '{' (yield_expr | star_expressions) '='? ['!' NAME] !'}'"
        ],
        [
            "invalid_conversion_character",
            "'!' &(':' | '}') | '!' !NAME"
        ],
        [
            "string",
            "STRING"
        ],
        [
            "tuple",
            "'(' [star_named_expression ',' star_named_expressions?] ')'"
        ],
        [
            "group",
            "'(' (yield_expr | named_expression) ')' | invalid_group"
        ],
        [
            "invalid_group",
            "'(' starred_expression ')' | '(' '**' expression ')'"
        ],
        [
            "list",
            "'[' star_named_expressions? ']'"
        ],
        [
            "listcomp",
            "'[' named_expression for_if_clauses ']' | invalid_comprehension"
        ],
        [
            "dict",
            "'{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'"
        ],
        [
            "double_starred_kvpairs",
            "','.double_starred_kvpair+ ','?"
        ],
        [
            "double_starred_kvpair",
            "'**' bitwise_or | kvpair"
        ],
        [
            "kvpair",
            "expression ':' expression"
        ],
        [
            "invalid_double_starred_kvpairs",
            "','.double_starred_kvpair+ ',' invalid_kvpair | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "invalid_kvpair",
            "expression !(':') | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "set",
            "'{' star_named_expressions '}'"
        ],
        [
            "dictcomp",
            "'{' kvpair for_if_clauses '}' | invalid_dict_comprehension"
        ],
        [
            "invalid_dict_comprehension",
            "'{' '**' bitwise_or for_if_clauses '}'"
        ],
        [
            "setcomp",
            "'{' named_expression for_if_clauses '}' | invalid_comprehension"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' star_targets_tuple_seq? ')' | '[' star_targets_list_seq? ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target ((',' star_target))+ ','? | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "','.star_target+ ','?"
        ],
        [
            "block",
            "NEWLINE INDENT statements DEDENT | simple_stmts | invalid_block"
        ],
        [
            "statements",
            "statement+"
        ],
        [
            "statement",
            "compound_stmt | simple_stmts"
        ],
        [
            "invalid_block",
            "NEWLINE !INDENT"
        ],
        [
            "else_block",
            "invalid_else_stmt | 'else' &&':' block"
        ],
        [
            "invalid_else_stmt",
            "'else' ':' NEWLINE !INDENT"
        ]
    ],
    "try_stmt": [
        [
            "try_stmt",
            "invalid_try_stmt | 'try' &&':' block finally_block | 'try' &&':' block except_block+ else_block? finally_block? | 'try' &&':' block except_star_block+ else_block? finally_block?"
        ],
        [
            "invalid_try_stmt",
            "'try' ':' NEWLINE !INDENT | 'try' ':' block !('except' | 'finally') | 'try' ':' block* except_block+ 'except' '*' expression ['as' NAME] ':' | 'try' ':' block* except_star_block+ 'except' [expression ['as' NAME]] ':'"
        ],
        [
            "block",
            "NEWLINE INDENT statements DEDENT | simple_stmts | invalid_block"
        ],
        [
            "statements",
            "statement+"
        ],
        [
            "statement",
            "compound_stmt | simple_stmts"
        ],
        [
            "invalid_block",
            "NEWLINE !INDENT"
        ],
        [
            "except_block",
            "invalid_except_stmt_indent | 'except' expression ['as' NAME] ':' block | 'except' ':' block | invalid_except_stmt"
        ],
        [
            "invalid_except_stmt_indent",
            "'except' expression ['as' NAME] ':' NEWLINE !INDENT | 'except' ':' NEWLINE !INDENT"
        ],
        [
            "invalid_except_stmt",
            "'except' '*'? expression ',' expressions ['as' NAME] ':' | 'except' '*'? expression ['as' NAME] NEWLINE | 'except' NEWLINE | 'except' '*' (NEWLINE | ':')"
        ],
        [
            "expressions",
            "expression ((',' expression))+ ','? | expression ',' | expression"
        ],
        [
            "except_star_block",
            "invalid_except_star_stmt_indent | 'except' '*' expression ['as' NAME] ':' block | invalid_except_stmt"
        ],
        [
            "invalid_except_star_stmt_indent",
            "'except' '*' expression ['as' NAME] ':' NEWLINE !INDENT"
        ],
        [
            "finally_block",
            "invalid_finally_stmt | 'finally' &&':' block"
        ],
        [
            "invalid_finally_stmt",
            "'finally' ':' NEWLINE !INDENT"
        ],
        [
            "else_block",
            "invalid_else_stmt | 'else' &&':' block"
        ],
        [
            "invalid_else_stmt",
            "'else' ':' NEWLINE !INDENT"
        ]
    ],
    "with_stmt": [
        [
            "with_stmt",
            "invalid_with_stmt_indent | 'with' '(' ','.with_item+ ','? ')' ':' block | 'with' ','.with_item+ ':' TYPE_COMMENT? block | 'async' 'with' '(' ','.with_item+ ','? ')' ':' block | 'async' 'with' ','.with_item+ ':' TYPE_COMMENT? block | invalid_with_stmt"
        ],
        [
            "invalid_with_stmt_indent",
            "'async'? 'with' ','.(expression ['as' star_target])+ ':' NEWLINE !INDENT | 'async'? 'with' '(' ','.(expressions ['as' star_target])+ ','? ')' ':' NEWLINE !INDENT"
        ],
        [
            "star_target",
            "'*' (!'*' star_target) | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "slices",
            "slice !',' | ','.(slice | starred_expression)+ ','?"
        ],
        [
            "slice",
            "expression? ':' expression? [':' expression?] | named_expression"
        ],
        [
            "named_expression",
            "assignment_expression | invalid_named_expression | expression !':='"
        ],
        [
            "assignment_expression",
            "NAME ':=' ~ expression"
        ],
        [
            "invalid_named_expression",
            "expression ':=' expression | NAME '=' bitwise_or !('=' | ':=') | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=')"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "bitwise_and",
            "bitwise_and '&' shift_expr | shift_expr"
        ],
        [
            "shift_expr",
            "shift_expr '<<' sum | shift_expr '>>' sum | sum"
        ],
        [
            "sum",
            "sum '+' term | sum '-' term | term"
        ],
        [
            "term",
            "term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor"
        ],
        [
            "factor",
            "'+' factor | '-' factor | '~' factor | power"
        ],
        [
            "power",
            "await_primary '**' factor | await_primary"
        ],
        [
            "await_primary",
            "'await' primary | primary"
        ],
        [
            "primary",
            "primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom"
        ],
        [
            "genexp",
            "'(' (assignment_expression | expression !':=') for_if_clauses ')' | invalid_comprehension"
        ],
        [
            "for_if_clauses",
            "for_if_clause+"
        ],
        [
            "for_if_clause",
            "'async' 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | invalid_for_target"
        ],
        [
            "star_targets",
            "star_target !',' | star_target ((',' star_target))* ','?"
        ],
        [
            "disjunction",
            "conjunction (('or' conjunction))+ | conjunction"
        ],
        [
            "conjunction",
            "inversion (('and' inversion))+ | inversion"
        ],
        [
            "inversion",
            "'not' inversion | comparison"
        ],
        [
            "comparison",
            "bitwise_or compare_op_bitwise_or_pair+ | bitwise_or"
        ],
        [
            "compare_op_bitwise_or_pair",
            "eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or"
        ],
        [
            "eq_bitwise_or",
            "'==' bitwise_or"
        ],
        [
            "noteq_bitwise_or",
            "('!=') bitwise_or"
        ],
        [
            "lte_bitwise_or",
            "'<=' bitwise_or"
        ],
        [
            "lt_bitwise_or",
            "'<' bitwise_or"
        ],
        [
            "gte_bitwise_or",
            "'>=' bitwise_or"
        ],
        [
            "gt_bitwise_or",
            "'>' bitwise_or"
        ],
        [
            "notin_bitwise_or",
            "'not' 'in' bitwise_or"
        ],
        [
            "in_bitwise_or",
            "'in' bitwise_or"
        ],
        [
            "isnot_bitwise_or",
            "'is' 'not' bitwise_or"
        ],
        [
            "is_bitwise_or",
            "'is' bitwise_or"
        ],
        [
            "invalid_for_target",
            "'async'? 'for' star_expressions"
        ],
        [
            "star_expressions",
            "star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "invalid_comprehension",
            "('[' | '(' | '{') starred_expression for_if_clauses | ('[' | '{') star_named_expression ',' star_named_expressions for_if_clauses | ('[' | '{') star_named_expression ',' for_if_clauses"
        ],
        [
            "starred_expression",
            "invalid_starred_expression | '*' expression"
        ],
        [
            "invalid_starred_expression",
            "'*' expression '=' expression"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "star_named_expressions",
            "','.star_named_expression+ ','?"
        ],
        [
            "arguments",
            "args ','? &')' | invalid_arguments"
        ],
        [
            "args",
            "','.(starred_expression | (assignment_expression | expression !':=') !'=')+ [',' kwargs] | kwargs"
        ],
        [
            "kwargs",
            "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+"
        ],
        [
            "kwarg_or_starred",
            "invalid_kwarg | NAME '=' expression | starred_expression"
        ],
        [
            "invalid_kwarg",
            "('True' | 'False' | 'None') '=' | NAME '=' expression for_if_clauses | !(NAME '=') expression '=' | '**' expression '=' expression"
        ],
        [
            "kwarg_or_double_starred",
            "invalid_kwarg | NAME '=' expression | '**' expression"
        ],
        [
            "invalid_arguments",
            "((','.(starred_expression | (assignment_expression | expression !':=') !'=')+ ',' kwargs) | kwargs) ',' '*' | expression for_if_clauses ',' [args | expression for_if_clauses] | NAME '=' expression for_if_clauses | [(args ',')] NAME '=' &(',' | ')') | args for_if_clauses | args ',' expression for_if_clauses | args ',' args"
        ],
        [
            "atom",
            "NAME | 'True' | 'False' | 'None' | &(STRING | FSTRING_START) strings | NUMBER | &'(' (tuple | group | genexp) | &'[' (list | listcomp) | &'{' (dict | set | dictcomp | setcomp) | '...'"
        ],
        [
            "strings",
            "((fstring | string))+"
        ],
        [
            "fstring",
            "FSTRING_START fstring_middle* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' (yield_expr | star_expressions) '='? fstring_conversion? fstring_full_format_spec? '}' | invalid_replacement_field"
        ],
        [
            "yield_expr",
            "'yield' 'from' expression | 'yield' star_expressions?"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' fstring_format_spec*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "invalid_replacement_field",
            "'{' '=' | '{' '!' | '{' ':' | '{' '}' | '{' !(yield_expr | star_expressions) | '{' (yield_expr | star_expressions) !('=' | '!' | ':' | '}') | '{' (yield_expr | star_expressions) '=' !('!' | ':' | '}') | '{' (yield_expr | star_expressions) '='? invalid_conversion_character | '{' (yield_expr | star_expressions) '='? ['!' NAME] !(':' | '}') | '{' (yield_expr | star_expressions) '='? ['!' NAME] ':' fstring_format_spec* !'}' | '{' (yield_expr | star_expressions) '='? ['!' NAME] !'}'"
        ],
        [
            "invalid_conversion_character",
            "'!' &(':' | '}') | '!' !NAME"
        ],
        [
            "string",
            "STRING"
        ],
        [
            "tuple",
            "'(' [star_named_expression ',' star_named_expressions?] ')'"
        ],
        [
            "group",
            "'(' (yield_expr | named_expression) ')' | invalid_group"
        ],
        [
            "invalid_group",
            "'(' starred_expression ')' | '(' '**' expression ')'"
        ],
        [
            "list",
            "'[' star_named_expressions? ']'"
        ],
        [
            "listcomp",
            "'[' named_expression for_if_clauses ']' | invalid_comprehension"
        ],
        [
            "dict",
            "'{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'"
        ],
        [
            "double_starred_kvpairs",
            "','.double_starred_kvpair+ ','?"
        ],
        [
            "double_starred_kvpair",
            "'**' bitwise_or | kvpair"
        ],
        [
            "kvpair",
            "expression ':' expression"
        ],
        [
            "invalid_double_starred_kvpairs",
            "','.double_starred_kvpair+ ',' invalid_kvpair | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "invalid_kvpair",
            "expression !(':') | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "set",
            "'{' star_named_expressions '}'"
        ],
        [
            "dictcomp",
            "'{' kvpair for_if_clauses '}' | invalid_dict_comprehension"
        ],
        [
            "invalid_dict_comprehension",
            "'{' '**' bitwise_or for_if_clauses '}'"
        ],
        [
            "setcomp",
            "'{' named_expression for_if_clauses '}' | invalid_comprehension"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' star_targets_tuple_seq? ')' | '[' star_targets_list_seq? ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target ((',' star_target))+ ','? | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "','.star_target+ ','?"
        ],
        [
            "expressions",
            "expression ((',' expression))+ ','? | expression ',' | expression"
        ],
        [
            "with_item",
            "expression 'as' star_target &(',' | ')' | ':') | invalid_with_item | expression"
        ],
        [
            "invalid_with_item",
            "expression 'as' expression &(',' | ')' | ':')"
        ],
        [
            "block",
            "NEWLINE INDENT statements DEDENT | simple_stmts | invalid_block"
        ],
        [
            "statements",
            "statement+"
        ],
        [
            "statement",
            "compound_stmt | simple_stmts"
        ],
        [
            "invalid_block",
            "NEWLINE !INDENT"
        ],
        [
            "invalid_with_stmt",
            "'async'? 'with' ','.(expression ['as' star_target])+ NEWLINE | 'async'? 'with' '(' ','.(expressions ['as' star_target])+ ','? ')' NEWLINE"
        ]
    ],
    "match_stmt": [
        [
            "match_stmt",
            "\"match\" subject_expr ':' NEWLINE INDENT case_block+ DEDENT | invalid_match_stmt"
        ],
        [
            "subject_expr",
            "star_named_expression ',' star_named_expressions? | named_expression"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "bitwise_and",
            "bitwise_and '&' shift_expr | shift_expr"
        ],
        [
            "shift_expr",
            "shift_expr '<<' sum | shift_expr '>>' sum | sum"
        ],
        [
            "sum",
            "sum '+' term | sum '-' term | term"
        ],
        [
            "term",
            "term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor"
        ],
        [
            "factor",
            "'+' factor | '-' factor | '~' factor | power"
        ],
        [
            "power",
            "await_primary '**' factor | await_primary"
        ],
        [
            "await_primary",
            "'await' primary | primary"
        ],
        [
            "primary",
            "primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom"
        ],
        [
            "genexp",
            "'(' (assignment_expression | expression !':=') for_if_clauses ')' | invalid_comprehension"
        ],
        [
            "assignment_expression",
            "NAME ':=' ~ expression"
        ],
        [
            "for_if_clauses",
            "for_if_clause+"
        ],
        [
            "for_if_clause",
            "'async' 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | invalid_for_target"
        ],
        [
            "star_targets",
            "star_target !',' | star_target ((',' star_target))* ','?"
        ],
        [
            "star_target",
            "'*' (!'*' star_target) | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "slices",
            "slice !',' | ','.(slice | starred_expression)+ ','?"
        ],
        [
            "slice",
            "expression? ':' expression? [':' expression?] | named_expression"
        ],
        [
            "named_expression",
            "assignment_expression | invalid_named_expression | expression !':='"
        ],
        [
            "invalid_named_expression",
            "expression ':=' expression | NAME '=' bitwise_or !('=' | ':=') | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=')"
        ],
        [
            "list",
            "'[' star_named_expressions? ']'"
        ],
        [
            "star_named_expressions",
            "','.star_named_expression+ ','?"
        ],
        [
            "tuple",
            "'(' [star_named_expression ',' star_named_expressions?] ')'"
        ],
        [
            "starred_expression",
            "invalid_starred_expression | '*' expression"
        ],
        [
            "invalid_starred_expression",
            "'*' expression '=' expression"
        ],
        [
            "arguments",
            "args ','? &')' | invalid_arguments"
        ],
        [
            "args",
            "','.(starred_expression | (assignment_expression | expression !':=') !'=')+ [',' kwargs] | kwargs"
        ],
        [
            "kwargs",
            "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+"
        ],
        [
            "kwarg_or_starred",
            "invalid_kwarg | NAME '=' expression | starred_expression"
        ],
        [
            "invalid_kwarg",
            "('True' | 'False' | 'None') '=' | NAME '=' expression for_if_clauses | !(NAME '=') expression '=' | '**' expression '=' expression"
        ],
        [
            "kwarg_or_double_starred",
            "invalid_kwarg | NAME '=' expression | '**' expression"
        ],
        [
            "invalid_arguments",
            "((','.(starred_expression | (assignment_expression | expression !':=') !'=')+ ',' kwargs) | kwargs) ',' '*' | expression for_if_clauses ',' [args | expression for_if_clauses] | NAME '=' expression for_if_clauses | [(args ',')] NAME '=' &(',' | ')') | args for_if_clauses | args ',' expression for_if_clauses | args ',' args"
        ],
        [
            "atom",
            "NAME | 'True' | 'False' | 'None' | &(STRING | FSTRING_START) strings | NUMBER | &'(' (tuple | group | genexp) | &'[' (list | listcomp) | &'{' (dict | set | dictcomp | setcomp) | '...'"
        ],
        [
            "strings",
            "((fstring | string))+"
        ],
        [
            "fstring",
            "FSTRING_START fstring_middle* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' (yield_expr | star_expressions) '='? fstring_conversion? fstring_full_format_spec? '}' | invalid_replacement_field"
        ],
        [
            "yield_expr",
            "'yield' 'from' expression | 'yield' star_expressions?"
        ],
        [
            "star_expressions",
            "star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' fstring_format_spec*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "invalid_replacement_field",
            "'{' '=' | '{' '!' | '{' ':' | '{' '}' | '{' !(yield_expr | star_expressions) | '{' (yield_expr | star_expressions) !('=' | '!' | ':' | '}') | '{' (yield_expr | star_expressions) '=' !('!' | ':' | '}') | '{' (yield_expr | star_expressions) '='? invalid_conversion_character | '{' (yield_expr | star_expressions) '='? ['!' NAME] !(':' | '}') | '{' (yield_expr | star_expressions) '='? ['!' NAME] ':' fstring_format_spec* !'}' | '{' (yield_expr | star_expressions) '='? ['!' NAME] !'}'"
        ],
        [
            "invalid_conversion_character",
            "'!' &(':' | '}') | '!' !NAME"
        ],
        [
            "string",
            "STRING"
        ],
        [
            "group",
            "'(' (yield_expr | named_expression) ')' | invalid_group"
        ],
        [
            "invalid_group",
            "'(' starred_expression ')' | '(' '**' expression ')'"
        ],
        [
            "listcomp",
            "'[' named_expression for_if_clauses ']' | invalid_comprehension"
        ],
        [
            "invalid_comprehension",
            "('[' | '(' | '{') starred_expression for_if_clauses | ('[' | '{') star_named_expression ',' star_named_expressions for_if_clauses | ('[' | '{') star_named_expression ',' for_if_clauses"
        ],
        [
            "dict",
            "'{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'"
        ],
        [
            "double_starred_kvpairs",
            "','.double_starred_kvpair+ ','?"
        ],
        [
            "double_starred_kvpair",
            "'**' bitwise_or | kvpair"
        ],
        [
            "kvpair",
            "expression ':' expression"
        ],
        [
            "invalid_double_starred_kvpairs",
            "','.double_starred_kvpair+ ',' invalid_kvpair | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "invalid_kvpair",
            "expression !(':') | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "set",
            "'{' star_named_expressions '}'"
        ],
        [
            "dictcomp",
            "'{' kvpair for_if_clauses '}' | invalid_dict_comprehension"
        ],
        [
            "invalid_dict_comprehension",
            "'{' '**' bitwise_or for_if_clauses '}'"
        ],
        [
            "setcomp",
            "'{' named_expression for_if_clauses '}' | invalid_comprehension"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' star_targets_tuple_seq? ')' | '[' star_targets_list_seq? ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target ((',' star_target))+ ','? | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "','.star_target+ ','?"
        ],
        [
            "disjunction",
            "conjunction (('or' conjunction))+ | conjunction"
        ],
        [
            "conjunction",
            "inversion (('and' inversion))+ | inversion"
        ],
        [
            "inversion",
            "'not' inversion | comparison"
        ],
        [
            "comparison",
            "bitwise_or compare_op_bitwise_or_pair+ | bitwise_or"
        ],
        [
            "compare_op_bitwise_or_pair",
            "eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or"
        ],
        [
            "eq_bitwise_or",
            "'==' bitwise_or"
        ],
        [
            "noteq_bitwise_or",
            "('!=') bitwise_or"
        ],
        [
            "lte_bitwise_or",
            "'<=' bitwise_or"
        ],
        [
            "lt_bitwise_or",
            "'<' bitwise_or"
        ],
        [
            "gte_bitwise_or",
            "'>=' bitwise_or"
        ],
        [
            "gt_bitwise_or",
            "'>' bitwise_or"
        ],
        [
            "notin_bitwise_or",
            "'not' 'in' bitwise_or"
        ],
        [
            "in_bitwise_or",
            "'in' bitwise_or"
        ],
        [
            "isnot_bitwise_or",
            "'is' 'not' bitwise_or"
        ],
        [
            "is_bitwise_or",
            "'is' bitwise_or"
        ],
        [
            "invalid_for_target",
            "'async'? 'for' star_expressions"
        ],
        [
            "case_block",
            "invalid_case_block | \"case\" patterns guard? ':' block"
        ],
        [
            "invalid_case_block",
            "\"case\" patterns guard? NEWLINE | \"case\" patterns guard? ':' NEWLINE !INDENT"
        ],
        [
            "block",
            "NEWLINE INDENT statements DEDENT | simple_stmts | invalid_block"
        ],
        [
            "statements",
            "statement+"
        ],
        [
            "statement",
            "compound_stmt | simple_stmts"
        ],
        [
            "invalid_block",
            "NEWLINE !INDENT"
        ],
        [
            "invalid_match_stmt",
            "\"match\" subject_expr NEWLINE | \"match\" subject_expr ':' NEWLINE !INDENT"
        ]
    ],
    "guard": [
        [
            "guard",
            "'if' named_expression"
        ],
        [
            "named_expression",
            "assignment_expression | invalid_named_expression | expression !':='"
        ],
        [
            "assignment_expression",
            "NAME ':=' ~ expression"
        ],
        [
            "invalid_named_expression",
            "expression ':=' expression | NAME '=' bitwise_or !('=' | ':=') | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=')"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "bitwise_and",
            "bitwise_and '&' shift_expr | shift_expr"
        ],
        [
            "shift_expr",
            "shift_expr '<<' sum | shift_expr '>>' sum | sum"
        ],
        [
            "sum",
            "sum '+' term | sum '-' term | term"
        ],
        [
            "term",
            "term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor"
        ],
        [
            "factor",
            "'+' factor | '-' factor | '~' factor | power"
        ],
        [
            "power",
            "await_primary '**' factor | await_primary"
        ],
        [
            "await_primary",
            "'await' primary | primary"
        ],
        [
            "primary",
            "primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom"
        ],
        [
            "genexp",
            "'(' (assignment_expression | expression !':=') for_if_clauses ')' | invalid_comprehension"
        ],
        [
            "for_if_clauses",
            "for_if_clause+"
        ],
        [
            "for_if_clause",
            "'async' 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | invalid_for_target"
        ],
        [
            "star_targets",
            "star_target !',' | star_target ((',' star_target))* ','?"
        ],
        [
            "star_target",
            "'*' (!'*' star_target) | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "slices",
            "slice !',' | ','.(slice | starred_expression)+ ','?"
        ],
        [
            "slice",
            "expression? ':' expression? [':' expression?] | named_expression"
        ],
        [
            "starred_expression",
            "invalid_starred_expression | '*' expression"
        ],
        [
            "invalid_starred_expression",
            "'*' expression '=' expression"
        ],
        [
            "arguments",
            "args ','? &')' | invalid_arguments"
        ],
        [
            "args",
            "','.(starred_expression | (assignment_expression | expression !':=') !'=')+ [',' kwargs] | kwargs"
        ],
        [
            "kwargs",
            "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+"
        ],
        [
            "kwarg_or_starred",
            "invalid_kwarg | NAME '=' expression | starred_expression"
        ],
        [
            "invalid_kwarg",
            "('True' | 'False' | 'None') '=' | NAME '=' expression for_if_clauses | !(NAME '=') expression '=' | '**' expression '=' expression"
        ],
        [
            "kwarg_or_double_starred",
            "invalid_kwarg | NAME '=' expression | '**' expression"
        ],
        [
            "invalid_arguments",
            "((','.(starred_expression | (assignment_expression | expression !':=') !'=')+ ',' kwargs) | kwargs) ',' '*' | expression for_if_clauses ',' [args | expression for_if_clauses] | NAME '=' expression for_if_clauses | [(args ',')] NAME '=' &(',' | ')') | args for_if_clauses | args ',' expression for_if_clauses | args ',' args"
        ],
        [
            "atom",
            "NAME | 'True' | 'False' | 'None' | &(STRING | FSTRING_START) strings | NUMBER | &'(' (tuple | group | genexp) | &'[' (list | listcomp) | &'{' (dict | set | dictcomp | setcomp) | '...'"
        ],
        [
            "strings",
            "((fstring | string))+"
        ],
        [
            "fstring",
            "FSTRING_START fstring_middle* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' (yield_expr | star_expressions) '='? fstring_conversion? fstring_full_format_spec? '}' | invalid_replacement_field"
        ],
        [
            "yield_expr",
            "'yield' 'from' expression | 'yield' star_expressions?"
        ],
        [
            "star_expressions",
            "star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' fstring_format_spec*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "invalid_replacement_field",
            "'{' '=' | '{' '!' | '{' ':' | '{' '}' | '{' !(yield_expr | star_expressions) | '{' (yield_expr | star_expressions) !('=' | '!' | ':' | '}') | '{' (yield_expr | star_expressions) '=' !('!' | ':' | '}') | '{' (yield_expr | star_expressions) '='? invalid_conversion_character | '{' (yield_expr | star_expressions) '='? ['!' NAME] !(':' | '}') | '{' (yield_expr | star_expressions) '='? ['!' NAME] ':' fstring_format_spec* !'}' | '{' (yield_expr | star_expressions) '='? ['!' NAME] !'}'"
        ],
        [
            "invalid_conversion_character",
            "'!' &(':' | '}') | '!' !NAME"
        ],
        [
            "string",
            "STRING"
        ],
        [
            "tuple",
            "'(' [star_named_expression ',' star_named_expressions?] ')'"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "star_named_expressions",
            "','.star_named_expression+ ','?"
        ],
        [
            "group",
            "'(' (yield_expr | named_expression) ')' | invalid_group"
        ],
        [
            "invalid_group",
            "'(' starred_expression ')' | '(' '**' expression ')'"
        ],
        [
            "list",
            "'[' star_named_expressions? ']'"
        ],
        [
            "listcomp",
            "'[' named_expression for_if_clauses ']' | invalid_comprehension"
        ],
        [
            "invalid_comprehension",
            "('[' | '(' | '{') starred_expression for_if_clauses | ('[' | '{') star_named_expression ',' star_named_expressions for_if_clauses | ('[' | '{') star_named_expression ',' for_if_clauses"
        ],
        [
            "dict",
            "'{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'"
        ],
        [
            "double_starred_kvpairs",
            "','.double_starred_kvpair+ ','?"
        ],
        [
            "double_starred_kvpair",
            "'**' bitwise_or | kvpair"
        ],
        [
            "kvpair",
            "expression ':' expression"
        ],
        [
            "invalid_double_starred_kvpairs",
            "','.double_starred_kvpair+ ',' invalid_kvpair | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "invalid_kvpair",
            "expression !(':') | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "set",
            "'{' star_named_expressions '}'"
        ],
        [
            "dictcomp",
            "'{' kvpair for_if_clauses '}' | invalid_dict_comprehension"
        ],
        [
            "invalid_dict_comprehension",
            "'{' '**' bitwise_or for_if_clauses '}'"
        ],
        [
            "setcomp",
            "'{' named_expression for_if_clauses '}' | invalid_comprehension"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' star_targets_tuple_seq? ')' | '[' star_targets_list_seq? ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target ((',' star_target))+ ','? | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "','.star_target+ ','?"
        ],
        [
            "disjunction",
            "conjunction (('or' conjunction))+ | conjunction"
        ],
        [
            "conjunction",
            "inversion (('and' inversion))+ | inversion"
        ],
        [
            "inversion",
            "'not' inversion | comparison"
        ],
        [
            "comparison",
            "bitwise_or compare_op_bitwise_or_pair+ | bitwise_or"
        ],
        [
            "compare_op_bitwise_or_pair",
            "eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or"
        ],
        [
            "eq_bitwise_or",
            "'==' bitwise_or"
        ],
        [
            "noteq_bitwise_or",
            "('!=') bitwise_or"
        ],
        [
            "lte_bitwise_or",
            "'<=' bitwise_or"
        ],
        [
            "lt_bitwise_or",
            "'<' bitwise_or"
        ],
        [
            "gte_bitwise_or",
            "'>=' bitwise_or"
        ],
        [
            "gt_bitwise_or",
            "'>' bitwise_or"
        ],
        [
            "notin_bitwise_or",
            "'not' 'in' bitwise_or"
        ],
        [
            "in_bitwise_or",
            "'in' bitwise_or"
        ],
        [
            "isnot_bitwise_or",
            "'is' 'not' bitwise_or"
        ],
        [
            "is_bitwise_or",
            "'is' bitwise_or"
        ],
        [
            "invalid_for_target",
            "'async'? 'for' star_expressions"
        ]
    ],
    "patterns": [
        [
            "patterns",
            "open_sequence_pattern | pattern"
        ],
        [
            "open_sequence_pattern",
            "maybe_star_pattern ',' maybe_sequence_pattern?"
        ],
        [
            "maybe_star_pattern",
            "star_pattern | pattern"
        ],
        [
            "star_pattern",
            "'*' pattern_capture_target | '*' wildcard_pattern"
        ],
        [
            "pattern_capture_target",
            "!\"_\" NAME !('.' | '(' | '=')"
        ],
        [
            "pattern",
            "as_pattern | or_pattern"
        ],
        [
            "maybe_sequence_pattern",
            "','.maybe_star_pattern+ ','?"
        ]
    ],
    "or_pattern": [
        [
            "or_pattern",
            "'|'.closed_pattern+"
        ],
        [
            "closed_pattern",
            "literal_pattern | capture_pattern | wildcard_pattern | value_pattern | group_pattern | sequence_pattern | mapping_pattern | class_pattern"
        ]
    ],
    "as_pattern": [
        [
            "as_pattern",
            "or_pattern 'as' pattern_capture_target | invalid_as_pattern"
        ],
        [
            "pattern_capture_target",
            "!\"_\" NAME !('.' | '(' | '=')"
        ],
        [
            "invalid_as_pattern",
            "or_pattern 'as' \"_\" | or_pattern 'as' !NAME expression"
        ]
    ],
    "literal_pattern": [
        [
            "literal_pattern",
            "signed_number !('+' | '-') | complex_number | strings | 'None' | 'True' | 'False'"
        ],
        [
            "signed_number",
            "NUMBER | '-' NUMBER"
        ],
        [
            "complex_number",
            "signed_real_number '+' imaginary_number | signed_real_number '-' imaginary_number"
        ],
        [
            "signed_real_number",
            "real_number | '-' real_number"
        ],
        [
            "real_number",
            "NUMBER"
        ],
        [
            "imaginary_number",
            "NUMBER"
        ],
        [
            "strings",
            "((fstring | string))+"
        ],
        [
            "fstring",
            "FSTRING_START fstring_middle* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' (yield_expr | star_expressions) '='? fstring_conversion? fstring_full_format_spec? '}' | invalid_replacement_field"
        ],
        [
            "yield_expr",
            "'yield' 'from' expression | 'yield' star_expressions?"
        ],
        [
            "star_expressions",
            "star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "bitwise_and",
            "bitwise_and '&' shift_expr | shift_expr"
        ],
        [
            "shift_expr",
            "shift_expr '<<' sum | shift_expr '>>' sum | sum"
        ],
        [
            "sum",
            "sum '+' term | sum '-' term | term"
        ],
        [
            "term",
            "term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor"
        ],
        [
            "factor",
            "'+' factor | '-' factor | '~' factor | power"
        ],
        [
            "power",
            "await_primary '**' factor | await_primary"
        ],
        [
            "await_primary",
            "'await' primary | primary"
        ],
        [
            "primary",
            "primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom"
        ],
        [
            "genexp",
            "'(' (assignment_expression | expression !':=') for_if_clauses ')' | invalid_comprehension"
        ],
        [
            "assignment_expression",
            "NAME ':=' ~ expression"
        ],
        [
            "for_if_clauses",
            "for_if_clause+"
        ],
        [
            "for_if_clause",
            "'async' 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | invalid_for_target"
        ],
        [
            "star_targets",
            "star_target !',' | star_target ((',' star_target))* ','?"
        ],
        [
            "star_target",
            "'*' (!'*' star_target) | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "slices",
            "slice !',' | ','.(slice | starred_expression)+ ','?"
        ],
        [
            "slice",
            "expression? ':' expression? [':' expression?] | named_expression"
        ],
        [
            "named_expression",
            "assignment_expression | invalid_named_expression | expression !':='"
        ],
        [
            "invalid_named_expression",
            "expression ':=' expression | NAME '=' bitwise_or !('=' | ':=') | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=')"
        ],
        [
            "list",
            "'[' star_named_expressions? ']'"
        ],
        [
            "star_named_expressions",
            "','.star_named_expression+ ','?"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "tuple",
            "'(' [star_named_expression ',' star_named_expressions?] ')'"
        ],
        [
            "starred_expression",
            "invalid_starred_expression | '*' expression"
        ],
        [
            "invalid_starred_expression",
            "'*' expression '=' expression"
        ],
        [
            "arguments",
            "args ','? &')' | invalid_arguments"
        ],
        [
            "args",
            "','.(starred_expression | (assignment_expression | expression !':=') !'=')+ [',' kwargs] | kwargs"
        ],
        [
            "kwargs",
            "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+"
        ],
        [
            "kwarg_or_starred",
            "invalid_kwarg | NAME '=' expression | starred_expression"
        ],
        [
            "invalid_kwarg",
            "('True' | 'False' | 'None') '=' | NAME '=' expression for_if_clauses | !(NAME '=') expression '=' | '**' expression '=' expression"
        ],
        [
            "kwarg_or_double_starred",
            "invalid_kwarg | NAME '=' expression | '**' expression"
        ],
        [
            "invalid_arguments",
            "((','.(starred_expression | (assignment_expression | expression !':=') !'=')+ ',' kwargs) | kwargs) ',' '*' | expression for_if_clauses ',' [args | expression for_if_clauses] | NAME '=' expression for_if_clauses | [(args ',')] NAME '=' &(',' | ')') | args for_if_clauses | args ',' expression for_if_clauses | args ',' args"
        ],
        [
            "atom",
            "NAME | 'True' | 'False' | 'None' | &(STRING | FSTRING_START) strings | NUMBER | &'(' (tuple | group | genexp) | &'[' (list | listcomp) | &'{' (dict | set | dictcomp | setcomp) | '...'"
        ],
        [
            "group",
            "'(' (yield_expr | named_expression) ')' | invalid_group"
        ],
        [
            "invalid_group",
            "'(' starred_expression ')' | '(' '**' expression ')'"
        ],
        [
            "listcomp",
            "'[' named_expression for_if_clauses ']' | invalid_comprehension"
        ],
        [
            "invalid_comprehension",
            "('[' | '(' | '{') starred_expression for_if_clauses | ('[' | '{') star_named_expression ',' star_named_expressions for_if_clauses | ('[' | '{') star_named_expression ',' for_if_clauses"
        ],
        [
            "dict",
            "'{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'"
        ],
        [
            "double_starred_kvpairs",
            "','.double_starred_kvpair+ ','?"
        ],
        [
            "double_starred_kvpair",
            "'**' bitwise_or | kvpair"
        ],
        [
            "kvpair",
            "expression ':' expression"
        ],
        [
            "invalid_double_starred_kvpairs",
            "','.double_starred_kvpair+ ',' invalid_kvpair | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "invalid_kvpair",
            "expression !(':') | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "set",
            "'{' star_named_expressions '}'"
        ],
        [
            "dictcomp",
            "'{' kvpair for_if_clauses '}' | invalid_dict_comprehension"
        ],
        [
            "invalid_dict_comprehension",
            "'{' '**' bitwise_or for_if_clauses '}'"
        ],
        [
            "setcomp",
            "'{' named_expression for_if_clauses '}' | invalid_comprehension"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' star_targets_tuple_seq? ')' | '[' star_targets_list_seq? ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target ((',' star_target))+ ','? | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "','.star_target+ ','?"
        ],
        [
            "disjunction",
            "conjunction (('or' conjunction))+ | conjunction"
        ],
        [
            "conjunction",
            "inversion (('and' inversion))+ | inversion"
        ],
        [
            "inversion",
            "'not' inversion | comparison"
        ],
        [
            "comparison",
            "bitwise_or compare_op_bitwise_or_pair+ | bitwise_or"
        ],
        [
            "compare_op_bitwise_or_pair",
            "eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or"
        ],
        [
            "eq_bitwise_or",
            "'==' bitwise_or"
        ],
        [
            "noteq_bitwise_or",
            "('!=') bitwise_or"
        ],
        [
            "lte_bitwise_or",
            "'<=' bitwise_or"
        ],
        [
            "lt_bitwise_or",
            "'<' bitwise_or"
        ],
        [
            "gte_bitwise_or",
            "'>=' bitwise_or"
        ],
        [
            "gt_bitwise_or",
            "'>' bitwise_or"
        ],
        [
            "notin_bitwise_or",
            "'not' 'in' bitwise_or"
        ],
        [
            "in_bitwise_or",
            "'in' bitwise_or"
        ],
        [
            "isnot_bitwise_or",
            "'is' 'not' bitwise_or"
        ],
        [
            "is_bitwise_or",
            "'is' bitwise_or"
        ],
        [
            "invalid_for_target",
            "'async'? 'for' star_expressions"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' fstring_format_spec*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "invalid_replacement_field",
            "'{' '=' | '{' '!' | '{' ':' | '{' '}' | '{' !(yield_expr | star_expressions) | '{' (yield_expr | star_expressions) !('=' | '!' | ':' | '}') | '{' (yield_expr | star_expressions) '=' !('!' | ':' | '}') | '{' (yield_expr | star_expressions) '='? invalid_conversion_character | '{' (yield_expr | star_expressions) '='? ['!' NAME] !(':' | '}') | '{' (yield_expr | star_expressions) '='? ['!' NAME] ':' fstring_format_spec* !'}' | '{' (yield_expr | star_expressions) '='? ['!' NAME] !'}'"
        ],
        [
            "invalid_conversion_character",
            "'!' &(':' | '}') | '!' !NAME"
        ],
        [
            "string",
            "STRING"
        ]
    ],
    "capture_pattern": [
        [
            "capture_pattern",
            "pattern_capture_target"
        ],
        [
            "pattern_capture_target",
            "!\"_\" NAME !('.' | '(' | '=')"
        ]
    ],
    "wildcard_pattern": [
        [
            "wildcard_pattern",
            "\"_\""
        ]
    ],
    "value_pattern": [
        [
            "value_pattern",
            "attr !('.' | '(' | '=')"
        ],
        [
            "attr",
            "name_or_attr '.' NAME"
        ],
        [
            "name_or_attr",
            "attr | NAME"
        ]
    ],
    "group_pattern": [
        [
            "group_pattern",
            "'(' pattern ')'"
        ],
        [
            "pattern",
            "as_pattern | or_pattern"
        ]
    ],
    "sequence_pattern": [
        [
            "sequence_pattern",
            "'[' maybe_sequence_pattern? ']' | '(' open_sequence_pattern? ')'"
        ],
        [
            "maybe_sequence_pattern",
            "','.maybe_star_pattern+ ','?"
        ],
        [
            "maybe_star_pattern",
            "star_pattern | pattern"
        ],
        [
            "star_pattern",
            "'*' pattern_capture_target | '*' wildcard_pattern"
        ],
        [
            "pattern_capture_target",
            "!\"_\" NAME !('.' | '(' | '=')"
        ],
        [
            "pattern",
            "as_pattern | or_pattern"
        ],
        [
            "open_sequence_pattern",
            "maybe_star_pattern ',' maybe_sequence_pattern?"
        ]
    ],
    "mapping_pattern": [
        [
            "mapping_pattern",
            "'{' '}' | '{' double_star_pattern ','? '}' | '{' items_pattern ',' double_star_pattern ','? '}' | '{' items_pattern ','? '}'"
        ],
        [
            "double_star_pattern",
            "'**' pattern_capture_target"
        ],
        [
            "pattern_capture_target",
            "!\"_\" NAME !('.' | '(' | '=')"
        ],
        [
            "items_pattern",
            "','.key_value_pattern+"
        ],
        [
            "key_value_pattern",
            "(literal_expr | attr) ':' pattern"
        ],
        [
            "literal_expr",
            "signed_number !('+' | '-') | complex_number | strings | 'None' | 'True' | 'False'"
        ],
        [
            "signed_number",
            "NUMBER | '-' NUMBER"
        ],
        [
            "complex_number",
            "signed_real_number '+' imaginary_number | signed_real_number '-' imaginary_number"
        ],
        [
            "signed_real_number",
            "real_number | '-' real_number"
        ],
        [
            "real_number",
            "NUMBER"
        ],
        [
            "imaginary_number",
            "NUMBER"
        ],
        [
            "strings",
            "((fstring | string))+"
        ],
        [
            "fstring",
            "FSTRING_START fstring_middle* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' (yield_expr | star_expressions) '='? fstring_conversion? fstring_full_format_spec? '}' | invalid_replacement_field"
        ],
        [
            "yield_expr",
            "'yield' 'from' expression | 'yield' star_expressions?"
        ],
        [
            "star_expressions",
            "star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "bitwise_and",
            "bitwise_and '&' shift_expr | shift_expr"
        ],
        [
            "shift_expr",
            "shift_expr '<<' sum | shift_expr '>>' sum | sum"
        ],
        [
            "sum",
            "sum '+' term | sum '-' term | term"
        ],
        [
            "term",
            "term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor"
        ],
        [
            "factor",
            "'+' factor | '-' factor | '~' factor | power"
        ],
        [
            "power",
            "await_primary '**' factor | await_primary"
        ],
        [
            "await_primary",
            "'await' primary | primary"
        ],
        [
            "primary",
            "primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom"
        ],
        [
            "genexp",
            "'(' (assignment_expression | expression !':=') for_if_clauses ')' | invalid_comprehension"
        ],
        [
            "assignment_expression",
            "NAME ':=' ~ expression"
        ],
        [
            "for_if_clauses",
            "for_if_clause+"
        ],
        [
            "for_if_clause",
            "'async' 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | invalid_for_target"
        ],
        [
            "star_targets",
            "star_target !',' | star_target ((',' star_target))* ','?"
        ],
        [
            "star_target",
            "'*' (!'*' star_target) | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "slices",
            "slice !',' | ','.(slice | starred_expression)+ ','?"
        ],
        [
            "slice",
            "expression? ':' expression? [':' expression?] | named_expression"
        ],
        [
            "named_expression",
            "assignment_expression | invalid_named_expression | expression !':='"
        ],
        [
            "invalid_named_expression",
            "expression ':=' expression | NAME '=' bitwise_or !('=' | ':=') | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=')"
        ],
        [
            "list",
            "'[' star_named_expressions? ']'"
        ],
        [
            "star_named_expressions",
            "','.star_named_expression+ ','?"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "tuple",
            "'(' [star_named_expression ',' star_named_expressions?] ')'"
        ],
        [
            "starred_expression",
            "invalid_starred_expression | '*' expression"
        ],
        [
            "invalid_starred_expression",
            "'*' expression '=' expression"
        ],
        [
            "arguments",
            "args ','? &')' | invalid_arguments"
        ],
        [
            "args",
            "','.(starred_expression | (assignment_expression | expression !':=') !'=')+ [',' kwargs] | kwargs"
        ],
        [
            "kwargs",
            "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+"
        ],
        [
            "kwarg_or_starred",
            "invalid_kwarg | NAME '=' expression | starred_expression"
        ],
        [
            "invalid_kwarg",
            "('True' | 'False' | 'None') '=' | NAME '=' expression for_if_clauses | !(NAME '=') expression '=' | '**' expression '=' expression"
        ],
        [
            "kwarg_or_double_starred",
            "invalid_kwarg | NAME '=' expression | '**' expression"
        ],
        [
            "invalid_arguments",
            "((','.(starred_expression | (assignment_expression | expression !':=') !'=')+ ',' kwargs) | kwargs) ',' '*' | expression for_if_clauses ',' [args | expression for_if_clauses] | NAME '=' expression for_if_clauses | [(args ',')] NAME '=' &(',' | ')') | args for_if_clauses | args ',' expression for_if_clauses | args ',' args"
        ],
        [
            "atom",
            "NAME | 'True' | 'False' | 'None' | &(STRING | FSTRING_START) strings | NUMBER | &'(' (tuple | group | genexp) | &'[' (list | listcomp) | &'{' (dict | set | dictcomp | setcomp) | '...'"
        ],
        [
            "group",
            "'(' (yield_expr | named_expression) ')' | invalid_group"
        ],
        [
            "invalid_group",
            "'(' starred_expression ')' | '(' '**' expression ')'"
        ],
        [
            "listcomp",
            "'[' named_expression for_if_clauses ']' | invalid_comprehension"
        ],
        [
            "invalid_comprehension",
            "('[' | '(' | '{') starred_expression for_if_clauses | ('[' | '{') star_named_expression ',' star_named_expressions for_if_clauses | ('[' | '{') star_named_expression ',' for_if_clauses"
        ],
        [
            "dict",
            "'{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'"
        ],
        [
            "double_starred_kvpairs",
            "','.double_starred_kvpair+ ','?"
        ],
        [
            "double_starred_kvpair",
            "'**' bitwise_or | kvpair"
        ],
        [
            "kvpair",
            "expression ':' expression"
        ],
        [
            "invalid_double_starred_kvpairs",
            "','.double_starred_kvpair+ ',' invalid_kvpair | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "invalid_kvpair",
            "expression !(':') | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "set",
            "'{' star_named_expressions '}'"
        ],
        [
            "dictcomp",
            "'{' kvpair for_if_clauses '}' | invalid_dict_comprehension"
        ],
        [
            "invalid_dict_comprehension",
            "'{' '**' bitwise_or for_if_clauses '}'"
        ],
        [
            "setcomp",
            "'{' named_expression for_if_clauses '}' | invalid_comprehension"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' star_targets_tuple_seq? ')' | '[' star_targets_list_seq? ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target ((',' star_target))+ ','? | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "','.star_target+ ','?"
        ],
        [
            "disjunction",
            "conjunction (('or' conjunction))+ | conjunction"
        ],
        [
            "conjunction",
            "inversion (('and' inversion))+ | inversion"
        ],
        [
            "inversion",
            "'not' inversion | comparison"
        ],
        [
            "comparison",
            "bitwise_or compare_op_bitwise_or_pair+ | bitwise_or"
        ],
        [
            "compare_op_bitwise_or_pair",
            "eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or"
        ],
        [
            "eq_bitwise_or",
            "'==' bitwise_or"
        ],
        [
            "noteq_bitwise_or",
            "('!=') bitwise_or"
        ],
        [
            "lte_bitwise_or",
            "'<=' bitwise_or"
        ],
        [
            "lt_bitwise_or",
            "'<' bitwise_or"
        ],
        [
            "gte_bitwise_or",
            "'>=' bitwise_or"
        ],
        [
            "gt_bitwise_or",
            "'>' bitwise_or"
        ],
        [
            "notin_bitwise_or",
            "'not' 'in' bitwise_or"
        ],
        [
            "in_bitwise_or",
            "'in' bitwise_or"
        ],
        [
            "isnot_bitwise_or",
            "'is' 'not' bitwise_or"
        ],
        [
            "is_bitwise_or",
            "'is' bitwise_or"
        ],
        [
            "invalid_for_target",
            "'async'? 'for' star_expressions"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' fstring_format_spec*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "invalid_replacement_field",
            "'{' '=' | '{' '!' | '{' ':' | '{' '}' | '{' !(yield_expr | star_expressions) | '{' (yield_expr | star_expressions) !('=' | '!' | ':' | '}') | '{' (yield_expr | star_expressions) '=' !('!' | ':' | '}') | '{' (yield_expr | star_expressions) '='? invalid_conversion_character | '{' (yield_expr | star_expressions) '='? ['!' NAME] !(':' | '}') | '{' (yield_expr | star_expressions) '='? ['!' NAME] ':' fstring_format_spec* !'}' | '{' (yield_expr | star_expressions) '='? ['!' NAME] !'}'"
        ],
        [
            "invalid_conversion_character",
            "'!' &(':' | '}') | '!' !NAME"
        ],
        [
            "string",
            "STRING"
        ],
        [
            "attr",
            "name_or_attr '.' NAME"
        ],
        [
            "name_or_attr",
            "attr | NAME"
        ],
        [
            "pattern",
            "as_pattern | or_pattern"
        ]
    ],
    "class_pattern": [
        [
            "class_pattern",
            "name_or_attr '(' ')' | name_or_attr '(' positional_patterns ','? ')' | name_or_attr '(' keyword_patterns ','? ')' | name_or_attr '(' positional_patterns ',' keyword_patterns ','? ')' | invalid_class_pattern"
        ],
        [
            "name_or_attr",
            "attr | NAME"
        ],
        [
            "attr",
            "name_or_attr '.' NAME"
        ],
        [
            "positional_patterns",
            "','.pattern+"
        ],
        [
            "pattern",
            "as_pattern | or_pattern"
        ],
        [
            "keyword_patterns",
            "','.keyword_pattern+"
        ],
        [
            "keyword_pattern",
            "NAME '=' pattern"
        ],
        [
            "invalid_class_pattern",
            "name_or_attr '(' invalid_class_argument_pattern"
        ],
        [
            "invalid_class_argument_pattern",
            "[positional_patterns ','] keyword_patterns ',' positional_patterns"
        ]
    ],
    "function_def": [
        [
            "function_def",
            "decorators function_def_raw | function_def_raw"
        ],
        [
            "decorators",
            "(('@' named_expression NEWLINE))+"
        ],
        [
            "named_expression",
            "assignment_expression | invalid_named_expression | expression !':='"
        ],
        [
            "assignment_expression",
            "NAME ':=' ~ expression"
        ],
        [
            "invalid_named_expression",
            "expression ':=' expression | NAME '=' bitwise_or !('=' | ':=') | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=')"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "bitwise_and",
            "bitwise_and '&' shift_expr | shift_expr"
        ],
        [
            "shift_expr",
            "shift_expr '<<' sum | shift_expr '>>' sum | sum"
        ],
        [
            "sum",
            "sum '+' term | sum '-' term | term"
        ],
        [
            "term",
            "term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor"
        ],
        [
            "factor",
            "'+' factor | '-' factor | '~' factor | power"
        ],
        [
            "power",
            "await_primary '**' factor | await_primary"
        ],
        [
            "await_primary",
            "'await' primary | primary"
        ],
        [
            "primary",
            "primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom"
        ],
        [
            "genexp",
            "'(' (assignment_expression | expression !':=') for_if_clauses ')' | invalid_comprehension"
        ],
        [
            "for_if_clauses",
            "for_if_clause+"
        ],
        [
            "for_if_clause",
            "'async' 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | invalid_for_target"
        ],
        [
            "star_targets",
            "star_target !',' | star_target ((',' star_target))* ','?"
        ],
        [
            "star_target",
            "'*' (!'*' star_target) | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "slices",
            "slice !',' | ','.(slice | starred_expression)+ ','?"
        ],
        [
            "slice",
            "expression? ':' expression? [':' expression?] | named_expression"
        ],
        [
            "starred_expression",
            "invalid_starred_expression | '*' expression"
        ],
        [
            "invalid_starred_expression",
            "'*' expression '=' expression"
        ],
        [
            "arguments",
            "args ','? &')' | invalid_arguments"
        ],
        [
            "args",
            "','.(starred_expression | (assignment_expression | expression !':=') !'=')+ [',' kwargs] | kwargs"
        ],
        [
            "kwargs",
            "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+"
        ],
        [
            "kwarg_or_starred",
            "invalid_kwarg | NAME '=' expression | starred_expression"
        ],
        [
            "invalid_kwarg",
            "('True' | 'False' | 'None') '=' | NAME '=' expression for_if_clauses | !(NAME '=') expression '=' | '**' expression '=' expression"
        ],
        [
            "kwarg_or_double_starred",
            "invalid_kwarg | NAME '=' expression | '**' expression"
        ],
        [
            "invalid_arguments",
            "((','.(starred_expression | (assignment_expression | expression !':=') !'=')+ ',' kwargs) | kwargs) ',' '*' | expression for_if_clauses ',' [args | expression for_if_clauses] | NAME '=' expression for_if_clauses | [(args ',')] NAME '=' &(',' | ')') | args for_if_clauses | args ',' expression for_if_clauses | args ',' args"
        ],
        [
            "atom",
            "NAME | 'True' | 'False' | 'None' | &(STRING | FSTRING_START) strings | NUMBER | &'(' (tuple | group | genexp) | &'[' (list | listcomp) | &'{' (dict | set | dictcomp | setcomp) | '...'"
        ],
        [
            "strings",
            "((fstring | string))+"
        ],
        [
            "fstring",
            "FSTRING_START fstring_middle* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' (yield_expr | star_expressions) '='? fstring_conversion? fstring_full_format_spec? '}' | invalid_replacement_field"
        ],
        [
            "yield_expr",
            "'yield' 'from' expression | 'yield' star_expressions?"
        ],
        [
            "star_expressions",
            "star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' fstring_format_spec*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "invalid_replacement_field",
            "'{' '=' | '{' '!' | '{' ':' | '{' '}' | '{' !(yield_expr | star_expressions) | '{' (yield_expr | star_expressions) !('=' | '!' | ':' | '}') | '{' (yield_expr | star_expressions) '=' !('!' | ':' | '}') | '{' (yield_expr | star_expressions) '='? invalid_conversion_character | '{' (yield_expr | star_expressions) '='? ['!' NAME] !(':' | '}') | '{' (yield_expr | star_expressions) '='? ['!' NAME] ':' fstring_format_spec* !'}' | '{' (yield_expr | star_expressions) '='? ['!' NAME] !'}'"
        ],
        [
            "invalid_conversion_character",
            "'!' &(':' | '}') | '!' !NAME"
        ],
        [
            "string",
            "STRING"
        ],
        [
            "tuple",
            "'(' [star_named_expression ',' star_named_expressions?] ')'"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "star_named_expressions",
            "','.star_named_expression+ ','?"
        ],
        [
            "group",
            "'(' (yield_expr | named_expression) ')' | invalid_group"
        ],
        [
            "invalid_group",
            "'(' starred_expression ')' | '(' '**' expression ')'"
        ],
        [
            "list",
            "'[' star_named_expressions? ']'"
        ],
        [
            "listcomp",
            "'[' named_expression for_if_clauses ']' | invalid_comprehension"
        ],
        [
            "invalid_comprehension",
            "('[' | '(' | '{') starred_expression for_if_clauses | ('[' | '{') star_named_expression ',' star_named_expressions for_if_clauses | ('[' | '{') star_named_expression ',' for_if_clauses"
        ],
        [
            "dict",
            "'{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'"
        ],
        [
            "double_starred_kvpairs",
            "','.double_starred_kvpair+ ','?"
        ],
        [
            "double_starred_kvpair",
            "'**' bitwise_or | kvpair"
        ],
        [
            "kvpair",
            "expression ':' expression"
        ],
        [
            "invalid_double_starred_kvpairs",
            "','.double_starred_kvpair+ ',' invalid_kvpair | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "invalid_kvpair",
            "expression !(':') | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "set",
            "'{' star_named_expressions '}'"
        ],
        [
            "dictcomp",
            "'{' kvpair for_if_clauses '}' | invalid_dict_comprehension"
        ],
        [
            "invalid_dict_comprehension",
            "'{' '**' bitwise_or for_if_clauses '}'"
        ],
        [
            "setcomp",
            "'{' named_expression for_if_clauses '}' | invalid_comprehension"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' star_targets_tuple_seq? ')' | '[' star_targets_list_seq? ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target ((',' star_target))+ ','? | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "','.star_target+ ','?"
        ],
        [
            "disjunction",
            "conjunction (('or' conjunction))+ | conjunction"
        ],
        [
            "conjunction",
            "inversion (('and' inversion))+ | inversion"
        ],
        [
            "inversion",
            "'not' inversion | comparison"
        ],
        [
            "comparison",
            "bitwise_or compare_op_bitwise_or_pair+ | bitwise_or"
        ],
        [
            "compare_op_bitwise_or_pair",
            "eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or"
        ],
        [
            "eq_bitwise_or",
            "'==' bitwise_or"
        ],
        [
            "noteq_bitwise_or",
            "('!=') bitwise_or"
        ],
        [
            "lte_bitwise_or",
            "'<=' bitwise_or"
        ],
        [
            "lt_bitwise_or",
            "'<' bitwise_or"
        ],
        [
            "gte_bitwise_or",
            "'>=' bitwise_or"
        ],
        [
            "gt_bitwise_or",
            "'>' bitwise_or"
        ],
        [
            "notin_bitwise_or",
            "'not' 'in' bitwise_or"
        ],
        [
            "in_bitwise_or",
            "'in' bitwise_or"
        ],
        [
            "isnot_bitwise_or",
            "'is' 'not' bitwise_or"
        ],
        [
            "is_bitwise_or",
            "'is' bitwise_or"
        ],
        [
            "invalid_for_target",
            "'async'? 'for' star_expressions"
        ],
        [
            "function_def_raw",
            "invalid_def_raw | 'def' NAME type_params? &&'(' params? ')' ['->' expression] &&':' func_type_comment? block | 'async' 'def' NAME type_params? &&'(' params? ')' ['->' expression] &&':' func_type_comment? block"
        ],
        [
            "invalid_def_raw",
            "'async'? 'def' NAME type_params? '(' params? ')' ['->' expression] ':' NEWLINE !INDENT"
        ],
        [
            "params",
            "invalid_parameters | parameters"
        ],
        [
            "invalid_parameters",
            "\"/\" ',' | (slash_no_default | slash_with_default) param_maybe_default* '/' | slash_no_default? param_no_default* invalid_parameters_helper param_no_default | param_no_default* '(' param_no_default+ ','? ')' | [(slash_no_default | slash_with_default)] param_maybe_default* '*' (',' | param_no_default) param_maybe_default* '/' | param_maybe_default+ '/' '*'"
        ],
        [
            "slash_no_default",
            "param_no_default+ '/' ',' | param_no_default+ '/' &')'"
        ],
        [
            "param_no_default",
            "param ',' TYPE_COMMENT? | param TYPE_COMMENT? &')'"
        ],
        [
            "param",
            "NAME annotation?"
        ],
        [
            "annotation",
            "':' expression"
        ],
        [
            "slash_with_default",
            "param_no_default* param_with_default+ '/' ',' | param_no_default* param_with_default+ '/' &')'"
        ],
        [
            "param_with_default",
            "param default ',' TYPE_COMMENT? | param default TYPE_COMMENT? &')'"
        ],
        [
            "default",
            "'=' expression | invalid_default"
        ],
        [
            "invalid_default",
            "'=' &(')' | ',')"
        ],
        [
            "param_maybe_default",
            "param default? ',' TYPE_COMMENT? | param default? TYPE_COMMENT? &')'"
        ],
        [
            "invalid_parameters_helper",
            "slash_with_default | param_with_default+"
        ],
        [
            "parameters",
            "slash_no_default param_no_default* param_with_default* star_etc? | slash_with_default param_with_default* star_etc? | param_no_default+ param_with_default* star_etc? | param_with_default+ star_etc? | star_etc"
        ],
        [
            "star_etc",
            "invalid_star_etc | '*' param_no_default param_maybe_default* kwds? | '*' param_no_default_star_annotation param_maybe_default* kwds? | '*' ',' param_maybe_default+ kwds? | kwds"
        ],
        [
            "invalid_star_etc",
            "'*' (')' | ',' (')' | '**')) | '*' ',' TYPE_COMMENT | '*' param '=' | '*' (param_no_default | ',') param_maybe_default* '*' (param_no_default | ',')"
        ],
        [
            "kwds",
            "invalid_kwds | '**' param_no_default"
        ],
        [
            "invalid_kwds",
            "'**' param '=' | '**' param ',' param | '**' param ',' ('*' | '**' | '/')"
        ],
        [
            "param_no_default_star_annotation",
            "param_star_annotation ',' TYPE_COMMENT? | param_star_annotation TYPE_COMMENT? &')'"
        ],
        [
            "param_star_annotation",
            "NAME star_annotation"
        ],
        [
            "star_annotation",
            "':' star_expression"
        ],
        [
            "func_type_comment",
            "NEWLINE TYPE_COMMENT &(NEWLINE INDENT) | invalid_double_type_comments | TYPE_COMMENT"
        ],
        [
            "invalid_double_type_comments",
            "TYPE_COMMENT NEWLINE TYPE_COMMENT NEWLINE INDENT"
        ],
        [
            "block",
            "NEWLINE INDENT statements DEDENT | simple_stmts | invalid_block"
        ],
        [
            "statements",
            "statement+"
        ],
        [
            "statement",
            "compound_stmt | simple_stmts"
        ],
        [
            "invalid_block",
            "NEWLINE !INDENT"
        ]
    ],
    "class_def": [
        [
            "class_def",
            "decorators class_def_raw | class_def_raw"
        ],
        [
            "decorators",
            "(('@' named_expression NEWLINE))+"
        ],
        [
            "named_expression",
            "assignment_expression | invalid_named_expression | expression !':='"
        ],
        [
            "assignment_expression",
            "NAME ':=' ~ expression"
        ],
        [
            "invalid_named_expression",
            "expression ':=' expression | NAME '=' bitwise_or !('=' | ':=') | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=')"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "bitwise_and",
            "bitwise_and '&' shift_expr | shift_expr"
        ],
        [
            "shift_expr",
            "shift_expr '<<' sum | shift_expr '>>' sum | sum"
        ],
        [
            "sum",
            "sum '+' term | sum '-' term | term"
        ],
        [
            "term",
            "term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor"
        ],
        [
            "factor",
            "'+' factor | '-' factor | '~' factor | power"
        ],
        [
            "power",
            "await_primary '**' factor | await_primary"
        ],
        [
            "await_primary",
            "'await' primary | primary"
        ],
        [
            "primary",
            "primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom"
        ],
        [
            "genexp",
            "'(' (assignment_expression | expression !':=') for_if_clauses ')' | invalid_comprehension"
        ],
        [
            "for_if_clauses",
            "for_if_clause+"
        ],
        [
            "for_if_clause",
            "'async' 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | invalid_for_target"
        ],
        [
            "star_targets",
            "star_target !',' | star_target ((',' star_target))* ','?"
        ],
        [
            "star_target",
            "'*' (!'*' star_target) | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "slices",
            "slice !',' | ','.(slice | starred_expression)+ ','?"
        ],
        [
            "slice",
            "expression? ':' expression? [':' expression?] | named_expression"
        ],
        [
            "starred_expression",
            "invalid_starred_expression | '*' expression"
        ],
        [
            "invalid_starred_expression",
            "'*' expression '=' expression"
        ],
        [
            "arguments",
            "args ','? &')' | invalid_arguments"
        ],
        [
            "args",
            "','.(starred_expression | (assignment_expression | expression !':=') !'=')+ [',' kwargs] | kwargs"
        ],
        [
            "kwargs",
            "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+"
        ],
        [
            "kwarg_or_starred",
            "invalid_kwarg | NAME '=' expression | starred_expression"
        ],
        [
            "invalid_kwarg",
            "('True' | 'False' | 'None') '=' | NAME '=' expression for_if_clauses | !(NAME '=') expression '=' | '**' expression '=' expression"
        ],
        [
            "kwarg_or_double_starred",
            "invalid_kwarg | NAME '=' expression | '**' expression"
        ],
        [
            "invalid_arguments",
            "((','.(starred_expression | (assignment_expression | expression !':=') !'=')+ ',' kwargs) | kwargs) ',' '*' | expression for_if_clauses ',' [args | expression for_if_clauses] | NAME '=' expression for_if_clauses | [(args ',')] NAME '=' &(',' | ')') | args for_if_clauses | args ',' expression for_if_clauses | args ',' args"
        ],
        [
            "atom",
            "NAME | 'True' | 'False' | 'None' | &(STRING | FSTRING_START) strings | NUMBER | &'(' (tuple | group | genexp) | &'[' (list | listcomp) | &'{' (dict | set | dictcomp | setcomp) | '...'"
        ],
        [
            "strings",
            "((fstring | string))+"
        ],
        [
            "fstring",
            "FSTRING_START fstring_middle* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' (yield_expr | star_expressions) '='? fstring_conversion? fstring_full_format_spec? '}' | invalid_replacement_field"
        ],
        [
            "yield_expr",
            "'yield' 'from' expression | 'yield' star_expressions?"
        ],
        [
            "star_expressions",
            "star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' fstring_format_spec*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "invalid_replacement_field",
            "'{' '=' | '{' '!' | '{' ':' | '{' '}' | '{' !(yield_expr | star_expressions) | '{' (yield_expr | star_expressions) !('=' | '!' | ':' | '}') | '{' (yield_expr | star_expressions) '=' !('!' | ':' | '}') | '{' (yield_expr | star_expressions) '='? invalid_conversion_character | '{' (yield_expr | star_expressions) '='? ['!' NAME] !(':' | '}') | '{' (yield_expr | star_expressions) '='? ['!' NAME] ':' fstring_format_spec* !'}' | '{' (yield_expr | star_expressions) '='? ['!' NAME] !'}'"
        ],
        [
            "invalid_conversion_character",
            "'!' &(':' | '}') | '!' !NAME"
        ],
        [
            "string",
            "STRING"
        ],
        [
            "tuple",
            "'(' [star_named_expression ',' star_named_expressions?] ')'"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "star_named_expressions",
            "','.star_named_expression+ ','?"
        ],
        [
            "group",
            "'(' (yield_expr | named_expression) ')' | invalid_group"
        ],
        [
            "invalid_group",
            "'(' starred_expression ')' | '(' '**' expression ')'"
        ],
        [
            "list",
            "'[' star_named_expressions? ']'"
        ],
        [
            "listcomp",
            "'[' named_expression for_if_clauses ']' | invalid_comprehension"
        ],
        [
            "invalid_comprehension",
            "('[' | '(' | '{') starred_expression for_if_clauses | ('[' | '{') star_named_expression ',' star_named_expressions for_if_clauses | ('[' | '{') star_named_expression ',' for_if_clauses"
        ],
        [
            "dict",
            "'{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'"
        ],
        [
            "double_starred_kvpairs",
            "','.double_starred_kvpair+ ','?"
        ],
        [
            "double_starred_kvpair",
            "'**' bitwise_or | kvpair"
        ],
        [
            "kvpair",
            "expression ':' expression"
        ],
        [
            "invalid_double_starred_kvpairs",
            "','.double_starred_kvpair+ ',' invalid_kvpair | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "invalid_kvpair",
            "expression !(':') | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "set",
            "'{' star_named_expressions '}'"
        ],
        [
            "dictcomp",
            "'{' kvpair for_if_clauses '}' | invalid_dict_comprehension"
        ],
        [
            "invalid_dict_comprehension",
            "'{' '**' bitwise_or for_if_clauses '}'"
        ],
        [
            "setcomp",
            "'{' named_expression for_if_clauses '}' | invalid_comprehension"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' star_targets_tuple_seq? ')' | '[' star_targets_list_seq? ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target ((',' star_target))+ ','? | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "','.star_target+ ','?"
        ],
        [
            "disjunction",
            "conjunction (('or' conjunction))+ | conjunction"
        ],
        [
            "conjunction",
            "inversion (('and' inversion))+ | inversion"
        ],
        [
            "inversion",
            "'not' inversion | comparison"
        ],
        [
            "comparison",
            "bitwise_or compare_op_bitwise_or_pair+ | bitwise_or"
        ],
        [
            "compare_op_bitwise_or_pair",
            "eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or"
        ],
        [
            "eq_bitwise_or",
            "'==' bitwise_or"
        ],
        [
            "noteq_bitwise_or",
            "('!=') bitwise_or"
        ],
        [
            "lte_bitwise_or",
            "'<=' bitwise_or"
        ],
        [
            "lt_bitwise_or",
            "'<' bitwise_or"
        ],
        [
            "gte_bitwise_or",
            "'>=' bitwise_or"
        ],
        [
            "gt_bitwise_or",
            "'>' bitwise_or"
        ],
        [
            "notin_bitwise_or",
            "'not' 'in' bitwise_or"
        ],
        [
            "in_bitwise_or",
            "'in' bitwise_or"
        ],
        [
            "isnot_bitwise_or",
            "'is' 'not' bitwise_or"
        ],
        [
            "is_bitwise_or",
            "'is' bitwise_or"
        ],
        [
            "invalid_for_target",
            "'async'? 'for' star_expressions"
        ],
        [
            "class_def_raw",
            "invalid_class_def_raw | 'class' NAME type_params? ['(' arguments? ')'] ':' block"
        ],
        [
            "invalid_class_def_raw",
            "'class' NAME type_params? ['(' arguments? ')'] NEWLINE | 'class' NAME type_params? ['(' arguments? ')'] ':' NEWLINE !INDENT"
        ],
        [
            "block",
            "NEWLINE INDENT statements DEDENT | simple_stmts | invalid_block"
        ],
        [
            "statements",
            "statement+"
        ],
        [
            "statement",
            "compound_stmt | simple_stmts"
        ],
        [
            "invalid_block",
            "NEWLINE !INDENT"
        ]
    ],
    "type_params": [
        [
            "type_params",
            "'[' type_param_seq ']'"
        ],
        [
            "type_param_seq",
            "','.type_param+ ','?"
        ],
        [
            "type_param",
            "NAME type_param_bound? | '*' NAME ':' expression | '*' NAME | '**' NAME ':' expression | '**' NAME"
        ],
        [
            "type_param_bound",
            "':' expression"
        ]
    ],
    "simple_stmts": [
        [
            "simple_stmts",
            "simple_stmt !';' NEWLINE | ';'.simple_stmt+ ';'? NEWLINE"
        ],
        [
            "simple_stmt",
            "assignment | &\"type\" type_alias | star_expressions | &'return' return_stmt | &('import' | 'from') import_stmt | &'raise' raise_stmt | 'pass' | &'del' del_stmt | &'yield' yield_stmt | &'assert' assert_stmt | 'break' | 'continue' | &'global' global_stmt | &'nonlocal' nonlocal_stmt"
        ],
        [
            "star_expressions",
            "star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "bitwise_and",
            "bitwise_and '&' shift_expr | shift_expr"
        ],
        [
            "shift_expr",
            "shift_expr '<<' sum | shift_expr '>>' sum | sum"
        ],
        [
            "sum",
            "sum '+' term | sum '-' term | term"
        ],
        [
            "term",
            "term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor"
        ],
        [
            "factor",
            "'+' factor | '-' factor | '~' factor | power"
        ],
        [
            "power",
            "await_primary '**' factor | await_primary"
        ],
        [
            "await_primary",
            "'await' primary | primary"
        ],
        [
            "primary",
            "primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom"
        ],
        [
            "genexp",
            "'(' (assignment_expression | expression !':=') for_if_clauses ')' | invalid_comprehension"
        ],
        [
            "assignment_expression",
            "NAME ':=' ~ expression"
        ],
        [
            "for_if_clauses",
            "for_if_clause+"
        ],
        [
            "for_if_clause",
            "'async' 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | invalid_for_target"
        ],
        [
            "star_targets",
            "star_target !',' | star_target ((',' star_target))* ','?"
        ],
        [
            "star_target",
            "'*' (!'*' star_target) | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "slices",
            "slice !',' | ','.(slice | starred_expression)+ ','?"
        ],
        [
            "slice",
            "expression? ':' expression? [':' expression?] | named_expression"
        ],
        [
            "named_expression",
            "assignment_expression | invalid_named_expression | expression !':='"
        ],
        [
            "invalid_named_expression",
            "expression ':=' expression | NAME '=' bitwise_or !('=' | ':=') | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=')"
        ],
        [
            "list",
            "'[' star_named_expressions? ']'"
        ],
        [
            "star_named_expressions",
            "','.star_named_expression+ ','?"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "tuple",
            "'(' [star_named_expression ',' star_named_expressions?] ')'"
        ],
        [
            "starred_expression",
            "invalid_starred_expression | '*' expression"
        ],
        [
            "invalid_starred_expression",
            "'*' expression '=' expression"
        ],
        [
            "arguments",
            "args ','? &')' | invalid_arguments"
        ],
        [
            "args",
            "','.(starred_expression | (assignment_expression | expression !':=') !'=')+ [',' kwargs] | kwargs"
        ],
        [
            "kwargs",
            "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+"
        ],
        [
            "kwarg_or_starred",
            "invalid_kwarg | NAME '=' expression | starred_expression"
        ],
        [
            "invalid_kwarg",
            "('True' | 'False' | 'None') '=' | NAME '=' expression for_if_clauses | !(NAME '=') expression '=' | '**' expression '=' expression"
        ],
        [
            "kwarg_or_double_starred",
            "invalid_kwarg | NAME '=' expression | '**' expression"
        ],
        [
            "invalid_arguments",
            "((','.(starred_expression | (assignment_expression | expression !':=') !'=')+ ',' kwargs) | kwargs) ',' '*' | expression for_if_clauses ',' [args | expression for_if_clauses] | NAME '=' expression for_if_clauses | [(args ',')] NAME '=' &(',' | ')') | args for_if_clauses | args ',' expression for_if_clauses | args ',' args"
        ],
        [
            "atom",
            "NAME | 'True' | 'False' | 'None' | &(STRING | FSTRING_START) strings | NUMBER | &'(' (tuple | group | genexp) | &'[' (list | listcomp) | &'{' (dict | set | dictcomp | setcomp) | '...'"
        ],
        [
            "strings",
            "((fstring | string))+"
        ],
        [
            "fstring",
            "FSTRING_START fstring_middle* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' (yield_expr | star_expressions) '='? fstring_conversion? fstring_full_format_spec? '}' | invalid_replacement_field"
        ],
        [
            "yield_expr",
            "'yield' 'from' expression | 'yield' star_expressions?"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' fstring_format_spec*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "invalid_replacement_field",
            "'{' '=' | '{' '!' | '{' ':' | '{' '}' | '{' !(yield_expr | star_expressions) | '{' (yield_expr | star_expressions) !('=' | '!' | ':' | '}') | '{' (yield_expr | star_expressions) '=' !('!' | ':' | '}') | '{' (yield_expr | star_expressions) '='? invalid_conversion_character | '{' (yield_expr | star_expressions) '='? ['!' NAME] !(':' | '}') | '{' (yield_expr | star_expressions) '='? ['!' NAME] ':' fstring_format_spec* !'}' | '{' (yield_expr | star_expressions) '='? ['!' NAME] !'}'"
        ],
        [
            "invalid_conversion_character",
            "'!' &(':' | '}') | '!' !NAME"
        ],
        [
            "string",
            "STRING"
        ],
        [
            "group",
            "'(' (yield_expr | named_expression) ')' | invalid_group"
        ],
        [
            "invalid_group",
            "'(' starred_expression ')' | '(' '**' expression ')'"
        ],
        [
            "listcomp",
            "'[' named_expression for_if_clauses ']' | invalid_comprehension"
        ],
        [
            "invalid_comprehension",
            "('[' | '(' | '{') starred_expression for_if_clauses | ('[' | '{') star_named_expression ',' star_named_expressions for_if_clauses | ('[' | '{') star_named_expression ',' for_if_clauses"
        ],
        [
            "dict",
            "'{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'"
        ],
        [
            "double_starred_kvpairs",
            "','.double_starred_kvpair+ ','?"
        ],
        [
            "double_starred_kvpair",
            "'**' bitwise_or | kvpair"
        ],
        [
            "kvpair",
            "expression ':' expression"
        ],
        [
            "invalid_double_starred_kvpairs",
            "','.double_starred_kvpair+ ',' invalid_kvpair | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "invalid_kvpair",
            "expression !(':') | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "set",
            "'{' star_named_expressions '}'"
        ],
        [
            "dictcomp",
            "'{' kvpair for_if_clauses '}' | invalid_dict_comprehension"
        ],
        [
            "invalid_dict_comprehension",
            "'{' '**' bitwise_or for_if_clauses '}'"
        ],
        [
            "setcomp",
            "'{' named_expression for_if_clauses '}' | invalid_comprehension"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' star_targets_tuple_seq? ')' | '[' star_targets_list_seq? ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target ((',' star_target))+ ','? | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "','.star_target+ ','?"
        ],
        [
            "disjunction",
            "conjunction (('or' conjunction))+ | conjunction"
        ],
        [
            "conjunction",
            "inversion (('and' inversion))+ | inversion"
        ],
        [
            "inversion",
            "'not' inversion | comparison"
        ],
        [
            "comparison",
            "bitwise_or compare_op_bitwise_or_pair+ | bitwise_or"
        ],
        [
            "compare_op_bitwise_or_pair",
            "eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or"
        ],
        [
            "eq_bitwise_or",
            "'==' bitwise_or"
        ],
        [
            "noteq_bitwise_or",
            "('!=') bitwise_or"
        ],
        [
            "lte_bitwise_or",
            "'<=' bitwise_or"
        ],
        [
            "lt_bitwise_or",
            "'<' bitwise_or"
        ],
        [
            "gte_bitwise_or",
            "'>=' bitwise_or"
        ],
        [
            "gt_bitwise_or",
            "'>' bitwise_or"
        ],
        [
            "notin_bitwise_or",
            "'not' 'in' bitwise_or"
        ],
        [
            "in_bitwise_or",
            "'in' bitwise_or"
        ],
        [
            "isnot_bitwise_or",
            "'is' 'not' bitwise_or"
        ],
        [
            "is_bitwise_or",
            "'is' bitwise_or"
        ],
        [
            "invalid_for_target",
            "'async'? 'for' star_expressions"
        ]
    ],
    "assignment": [
        [
            "assignment",
            "NAME ':' expression ['=' annotated_rhs] | ('(' single_target ')' | single_subscript_attribute_target) ':' expression ['=' annotated_rhs] | ((star_targets '='))+ (yield_expr | star_expressions) !'=' TYPE_COMMENT? | single_target augassign ~ (yield_expr | star_expressions) | invalid_assignment"
        ],
        [
            "single_target",
            "single_subscript_attribute_target | NAME | '(' single_target ')'"
        ],
        [
            "single_subscript_attribute_target",
            "t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead"
        ],
        [
            "t_primary",
            "t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "slices",
            "slice !',' | ','.(slice | starred_expression)+ ','?"
        ],
        [
            "slice",
            "expression? ':' expression? [':' expression?] | named_expression"
        ],
        [
            "named_expression",
            "assignment_expression | invalid_named_expression | expression !':='"
        ],
        [
            "assignment_expression",
            "NAME ':=' ~ expression"
        ],
        [
            "invalid_named_expression",
            "expression ':=' expression | NAME '=' bitwise_or !('=' | ':=') | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=')"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "bitwise_and",
            "bitwise_and '&' shift_expr | shift_expr"
        ],
        [
            "shift_expr",
            "shift_expr '<<' sum | shift_expr '>>' sum | sum"
        ],
        [
            "sum",
            "sum '+' term | sum '-' term | term"
        ],
        [
            "term",
            "term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor"
        ],
        [
            "factor",
            "'+' factor | '-' factor | '~' factor | power"
        ],
        [
            "power",
            "await_primary '**' factor | await_primary"
        ],
        [
            "await_primary",
            "'await' primary | primary"
        ],
        [
            "primary",
            "primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom"
        ],
        [
            "genexp",
            "'(' (assignment_expression | expression !':=') for_if_clauses ')' | invalid_comprehension"
        ],
        [
            "for_if_clauses",
            "for_if_clause+"
        ],
        [
            "for_if_clause",
            "'async' 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | invalid_for_target"
        ],
        [
            "star_targets",
            "star_target !',' | star_target ((',' star_target))* ','?"
        ],
        [
            "star_target",
            "'*' (!'*' star_target) | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' star_targets_tuple_seq? ')' | '[' star_targets_list_seq? ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target ((',' star_target))+ ','? | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "','.star_target+ ','?"
        ],
        [
            "disjunction",
            "conjunction (('or' conjunction))+ | conjunction"
        ],
        [
            "conjunction",
            "inversion (('and' inversion))+ | inversion"
        ],
        [
            "inversion",
            "'not' inversion | comparison"
        ],
        [
            "comparison",
            "bitwise_or compare_op_bitwise_or_pair+ | bitwise_or"
        ],
        [
            "compare_op_bitwise_or_pair",
            "eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or"
        ],
        [
            "eq_bitwise_or",
            "'==' bitwise_or"
        ],
        [
            "noteq_bitwise_or",
            "('!=') bitwise_or"
        ],
        [
            "lte_bitwise_or",
            "'<=' bitwise_or"
        ],
        [
            "lt_bitwise_or",
            "'<' bitwise_or"
        ],
        [
            "gte_bitwise_or",
            "'>=' bitwise_or"
        ],
        [
            "gt_bitwise_or",
            "'>' bitwise_or"
        ],
        [
            "notin_bitwise_or",
            "'not' 'in' bitwise_or"
        ],
        [
            "in_bitwise_or",
            "'in' bitwise_or"
        ],
        [
            "isnot_bitwise_or",
            "'is' 'not' bitwise_or"
        ],
        [
            "is_bitwise_or",
            "'is' bitwise_or"
        ],
        [
            "invalid_for_target",
            "'async'? 'for' star_expressions"
        ],
        [
            "star_expressions",
            "star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "invalid_comprehension",
            "('[' | '(' | '{') starred_expression for_if_clauses | ('[' | '{') star_named_expression ',' star_named_expressions for_if_clauses | ('[' | '{') star_named_expression ',' for_if_clauses"
        ],
        [
            "starred_expression",
            "invalid_starred_expression | '*' expression"
        ],
        [
            "invalid_starred_expression",
            "'*' expression '=' expression"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "star_named_expressions",
            "','.star_named_expression+ ','?"
        ],
        [
            "arguments",
            "args ','? &')' | invalid_arguments"
        ],
        [
            "args",
            "','.(starred_expression | (assignment_expression | expression !':=') !'=')+ [',' kwargs] | kwargs"
        ],
        [
            "kwargs",
            "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+"
        ],
        [
            "kwarg_or_starred",
            "invalid_kwarg | NAME '=' expression | starred_expression"
        ],
        [
            "invalid_kwarg",
            "('True' | 'False' | 'None') '=' | NAME '=' expression for_if_clauses | !(NAME '=') expression '=' | '**' expression '=' expression"
        ],
        [
            "kwarg_or_double_starred",
            "invalid_kwarg | NAME '=' expression | '**' expression"
        ],
        [
            "invalid_arguments",
            "((','.(starred_expression | (assignment_expression | expression !':=') !'=')+ ',' kwargs) | kwargs) ',' '*' | expression for_if_clauses ',' [args | expression for_if_clauses] | NAME '=' expression for_if_clauses | [(args ',')] NAME '=' &(',' | ')') | args for_if_clauses | args ',' expression for_if_clauses | args ',' args"
        ],
        [
            "atom",
            "NAME | 'True' | 'False' | 'None' | &(STRING | FSTRING_START) strings | NUMBER | &'(' (tuple | group | genexp) | &'[' (list | listcomp) | &'{' (dict | set | dictcomp | setcomp) | '...'"
        ],
        [
            "strings",
            "((fstring | string))+"
        ],
        [
            "fstring",
            "FSTRING_START fstring_middle* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' (yield_expr | star_expressions) '='? fstring_conversion? fstring_full_format_spec? '}' | invalid_replacement_field"
        ],
        [
            "yield_expr",
            "'yield' 'from' expression | 'yield' star_expressions?"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' fstring_format_spec*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "invalid_replacement_field",
            "'{' '=' | '{' '!' | '{' ':' | '{' '}' | '{' !(yield_expr | star_expressions) | '{' (yield_expr | star_expressions) !('=' | '!' | ':' | '}') | '{' (yield_expr | star_expressions) '=' !('!' | ':' | '}') | '{' (yield_expr | star_expressions) '='? invalid_conversion_character | '{' (yield_expr | star_expressions) '='? ['!' NAME] !(':' | '}') | '{' (yield_expr | star_expressions) '='? ['!' NAME] ':' fstring_format_spec* !'}' | '{' (yield_expr | star_expressions) '='? ['!' NAME] !'}'"
        ],
        [
            "invalid_conversion_character",
            "'!' &(':' | '}') | '!' !NAME"
        ],
        [
            "string",
            "STRING"
        ],
        [
            "tuple",
            "'(' [star_named_expression ',' star_named_expressions?] ')'"
        ],
        [
            "group",
            "'(' (yield_expr | named_expression) ')' | invalid_group"
        ],
        [
            "invalid_group",
            "'(' starred_expression ')' | '(' '**' expression ')'"
        ],
        [
            "list",
            "'[' star_named_expressions? ']'"
        ],
        [
            "listcomp",
            "'[' named_expression for_if_clauses ']' | invalid_comprehension"
        ],
        [
            "dict",
            "'{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'"
        ],
        [
            "double_starred_kvpairs",
            "','.double_starred_kvpair+ ','?"
        ],
        [
            "double_starred_kvpair",
            "'**' bitwise_or | kvpair"
        ],
        [
            "kvpair",
            "expression ':' expression"
        ],
        [
            "invalid_double_starred_kvpairs",
            "','.double_starred_kvpair+ ',' invalid_kvpair | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "invalid_kvpair",
            "expression !(':') | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "set",
            "'{' star_named_expressions '}'"
        ],
        [
            "dictcomp",
            "'{' kvpair for_if_clauses '}' | invalid_dict_comprehension"
        ],
        [
            "invalid_dict_comprehension",
            "'{' '**' bitwise_or for_if_clauses '}'"
        ],
        [
            "setcomp",
            "'{' named_expression for_if_clauses '}' | invalid_comprehension"
        ],
        [
            "invalid_assignment",
            "invalid_ann_assign_target ':' expression | star_named_expression ',' star_named_expressions* ':' expression | expression ':' expression | ((star_targets '='))* star_expressions '=' | ((star_targets '='))* yield_expr '=' | star_expressions augassign (yield_expr | star_expressions)"
        ],
        [
            "invalid_ann_assign_target",
            "list | tuple | '(' invalid_ann_assign_target ')'"
        ]
    ],
    "expression": [
        [
            "expression",
            "invalid_expression | invalid_legacy_expression | disjunction 'if' disjunction 'else' expression | disjunction | lambdef"
        ],
        [
            "invalid_expression",
            "!(NAME STRING | SOFT_KEYWORD) disjunction expression_without_invalid | disjunction 'if' disjunction !('else' | ':') | 'lambda' lambda_params? ':' &FSTRING_MIDDLE"
        ],
        [
            "disjunction",
            "conjunction (('or' conjunction))+ | conjunction"
        ],
        [
            "conjunction",
            "inversion (('and' inversion))+ | inversion"
        ],
        [
            "inversion",
            "'not' inversion | comparison"
        ],
        [
            "comparison",
            "bitwise_or compare_op_bitwise_or_pair+ | bitwise_or"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "bitwise_and",
            "bitwise_and '&' shift_expr | shift_expr"
        ],
        [
            "shift_expr",
            "shift_expr '<<' sum | shift_expr '>>' sum | sum"
        ],
        [
            "sum",
            "sum '+' term | sum '-' term | term"
        ],
        [
            "term",
            "term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor"
        ],
        [
            "factor",
            "'+' factor | '-' factor | '~' factor | power"
        ],
        [
            "power",
            "await_primary '**' factor | await_primary"
        ],
        [
            "await_primary",
            "'await' primary | primary"
        ],
        [
            "primary",
            "primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom"
        ],
        [
            "genexp",
            "'(' (assignment_expression | expression !':=') for_if_clauses ')' | invalid_comprehension"
        ],
        [
            "assignment_expression",
            "NAME ':=' ~ expression"
        ],
        [
            "for_if_clauses",
            "for_if_clause+"
        ],
        [
            "for_if_clause",
            "'async' 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | invalid_for_target"
        ],
        [
            "star_targets",
            "star_target !',' | star_target ((',' star_target))* ','?"
        ],
        [
            "star_target",
            "'*' (!'*' star_target) | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "slices",
            "slice !',' | ','.(slice | starred_expression)+ ','?"
        ],
        [
            "slice",
            "expression? ':' expression? [':' expression?] | named_expression"
        ],
        [
            "named_expression",
            "assignment_expression | invalid_named_expression | expression !':='"
        ],
        [
            "invalid_named_expression",
            "expression ':=' expression | NAME '=' bitwise_or !('=' | ':=') | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=')"
        ],
        [
            "list",
            "'[' star_named_expressions? ']'"
        ],
        [
            "star_named_expressions",
            "','.star_named_expression+ ','?"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "tuple",
            "'(' [star_named_expression ',' star_named_expressions?] ')'"
        ],
        [
            "starred_expression",
            "invalid_starred_expression | '*' expression"
        ],
        [
            "invalid_starred_expression",
            "'*' expression '=' expression"
        ],
        [
            "arguments",
            "args ','? &')' | invalid_arguments"
        ],
        [
            "args",
            "','.(starred_expression | (assignment_expression | expression !':=') !'=')+ [',' kwargs] | kwargs"
        ],
        [
            "kwargs",
            "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+"
        ],
        [
            "kwarg_or_starred",
            "invalid_kwarg | NAME '=' expression | starred_expression"
        ],
        [
            "invalid_kwarg",
            "('True' | 'False' | 'None') '=' | NAME '=' expression for_if_clauses | !(NAME '=') expression '=' | '**' expression '=' expression"
        ],
        [
            "kwarg_or_double_starred",
            "invalid_kwarg | NAME '=' expression | '**' expression"
        ],
        [
            "invalid_arguments",
            "((','.(starred_expression | (assignment_expression | expression !':=') !'=')+ ',' kwargs) | kwargs) ',' '*' | expression for_if_clauses ',' [args | expression for_if_clauses] | NAME '=' expression for_if_clauses | [(args ',')] NAME '=' &(',' | ')') | args for_if_clauses | args ',' expression for_if_clauses | args ',' args"
        ],
        [
            "atom",
            "NAME | 'True' | 'False' | 'None' | &(STRING | FSTRING_START) strings | NUMBER | &'(' (tuple | group | genexp) | &'[' (list | listcomp) | &'{' (dict | set | dictcomp | setcomp) | '...'"
        ],
        [
            "strings",
            "((fstring | string))+"
        ],
        [
            "fstring",
            "FSTRING_START fstring_middle* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' (yield_expr | star_expressions) '='? fstring_conversion? fstring_full_format_spec? '}' | invalid_replacement_field"
        ],
        [
            "yield_expr",
            "'yield' 'from' expression | 'yield' star_expressions?"
        ],
        [
            "star_expressions",
            "star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' fstring_format_spec*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "invalid_replacement_field",
            "'{' '=' | '{' '!' | '{' ':' | '{' '}' | '{' !(yield_expr | star_expressions) | '{' (yield_expr | star_expressions) !('=' | '!' | ':' | '}') | '{' (yield_expr | star_expressions) '=' !('!' | ':' | '}') | '{' (yield_expr | star_expressions) '='? invalid_conversion_character | '{' (yield_expr | star_expressions) '='? ['!' NAME] !(':' | '}') | '{' (yield_expr | star_expressions) '='? ['!' NAME] ':' fstring_format_spec* !'}' | '{' (yield_expr | star_expressions) '='? ['!' NAME] !'}'"
        ],
        [
            "invalid_conversion_character",
            "'!' &(':' | '}') | '!' !NAME"
        ],
        [
            "string",
            "STRING"
        ],
        [
            "group",
            "'(' (yield_expr | named_expression) ')' | invalid_group"
        ],
        [
            "invalid_group",
            "'(' starred_expression ')' | '(' '**' expression ')'"
        ],
        [
            "listcomp",
            "'[' named_expression for_if_clauses ']' | invalid_comprehension"
        ],
        [
            "invalid_comprehension",
            "('[' | '(' | '{') starred_expression for_if_clauses | ('[' | '{') star_named_expression ',' star_named_expressions for_if_clauses | ('[' | '{') star_named_expression ',' for_if_clauses"
        ],
        [
            "dict",
            "'{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'"
        ],
        [
            "double_starred_kvpairs",
            "','.double_starred_kvpair+ ','?"
        ],
        [
            "double_starred_kvpair",
            "'**' bitwise_or | kvpair"
        ],
        [
            "kvpair",
            "expression ':' expression"
        ],
        [
            "invalid_double_starred_kvpairs",
            "','.double_starred_kvpair+ ',' invalid_kvpair | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "invalid_kvpair",
            "expression !(':') | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "set",
            "'{' star_named_expressions '}'"
        ],
        [
            "dictcomp",
            "'{' kvpair for_if_clauses '}' | invalid_dict_comprehension"
        ],
        [
            "invalid_dict_comprehension",
            "'{' '**' bitwise_or for_if_clauses '}'"
        ],
        [
            "setcomp",
            "'{' named_expression for_if_clauses '}' | invalid_comprehension"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' star_targets_tuple_seq? ')' | '[' star_targets_list_seq? ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target ((',' star_target))+ ','? | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "','.star_target+ ','?"
        ],
        [
            "invalid_for_target",
            "'async'? 'for' star_expressions"
        ],
        [
            "compare_op_bitwise_or_pair",
            "eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or"
        ],
        [
            "eq_bitwise_or",
            "'==' bitwise_or"
        ],
        [
            "noteq_bitwise_or",
            "('!=') bitwise_or"
        ],
        [
            "lte_bitwise_or",
            "'<=' bitwise_or"
        ],
        [
            "lt_bitwise_or",
            "'<' bitwise_or"
        ],
        [
            "gte_bitwise_or",
            "'>=' bitwise_or"
        ],
        [
            "gt_bitwise_or",
            "'>' bitwise_or"
        ],
        [
            "notin_bitwise_or",
            "'not' 'in' bitwise_or"
        ],
        [
            "in_bitwise_or",
            "'in' bitwise_or"
        ],
        [
            "isnot_bitwise_or",
            "'is' 'not' bitwise_or"
        ],
        [
            "is_bitwise_or",
            "'is' bitwise_or"
        ],
        [
            "expression_without_invalid",
            "disjunction 'if' disjunction 'else' expression | disjunction | lambdef"
        ],
        [
            "lambdef",
            "'lambda' lambda_params? ':' expression"
        ],
        [
            "lambda_params",
            "invalid_lambda_parameters | lambda_parameters"
        ],
        [
            "invalid_lambda_parameters",
            "\"/\" ',' | (lambda_slash_no_default | lambda_slash_with_default) lambda_param_maybe_default* '/' | lambda_slash_no_default? lambda_param_no_default* invalid_lambda_parameters_helper lambda_param_no_default | lambda_param_no_default* '(' ','.lambda_param+ ','? ')' | [(lambda_slash_no_default | lambda_slash_with_default)] lambda_param_maybe_default* '*' (',' | lambda_param_no_default) lambda_param_maybe_default* '/' | lambda_param_maybe_default+ '/' '*'"
        ],
        [
            "lambda_slash_no_default",
            "lambda_param_no_default+ '/' ',' | lambda_param_no_default+ '/' &':'"
        ],
        [
            "lambda_param_no_default",
            "lambda_param ',' | lambda_param &':'"
        ],
        [
            "lambda_param",
            "NAME"
        ],
        [
            "lambda_slash_with_default",
            "lambda_param_no_default* lambda_param_with_default+ '/' ',' | lambda_param_no_default* lambda_param_with_default+ '/' &':'"
        ],
        [
            "lambda_param_with_default",
            "lambda_param default ',' | lambda_param default &':'"
        ],
        [
            "default",
            "'=' expression | invalid_default"
        ],
        [
            "invalid_default",
            "'=' &(')' | ',')"
        ],
        [
            "lambda_param_maybe_default",
            "lambda_param default? ',' | lambda_param default? &':'"
        ],
        [
            "invalid_lambda_parameters_helper",
            "lambda_slash_with_default | lambda_param_with_default+"
        ],
        [
            "lambda_parameters",
            "lambda_slash_no_default lambda_param_no_default* lambda_param_with_default* lambda_star_etc? | lambda_slash_with_default lambda_param_with_default* lambda_star_etc? | lambda_param_no_default+ lambda_param_with_default* lambda_star_etc? | lambda_param_with_default+ lambda_star_etc? | lambda_star_etc"
        ],
        [
            "lambda_star_etc",
            "invalid_lambda_star_etc | '*' lambda_param_no_default lambda_param_maybe_default* lambda_kwds? | '*' ',' lambda_param_maybe_default+ lambda_kwds? | lambda_kwds"
        ],
        [
            "invalid_lambda_star_etc",
            "'*' (':' | ',' (':' | '**')) | '*' lambda_param '=' | '*' (lambda_param_no_default | ',') lambda_param_maybe_default* '*' (lambda_param_no_default | ',')"
        ],
        [
            "lambda_kwds",
            "invalid_lambda_kwds | '**' lambda_param_no_default"
        ],
        [
            "invalid_lambda_kwds",
            "'**' lambda_param '=' | '**' lambda_param ',' lambda_param | '**' lambda_param ',' ('*' | '**' | '/')"
        ],
        [
            "invalid_legacy_expression",
            "NAME !'(' star_expressions"
        ]
    ],
    "augassign": [
        [
            "augassign",
            "'+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//='"
        ]
    ],
    "annotated_rhs": [
        [
            "annotated_rhs",
            "yield_expr | star_expressions"
        ],
        [
            "yield_expr",
            "'yield' 'from' expression | 'yield' star_expressions?"
        ],
        [
            "star_expressions",
            "star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "bitwise_and",
            "bitwise_and '&' shift_expr | shift_expr"
        ],
        [
            "shift_expr",
            "shift_expr '<<' sum | shift_expr '>>' sum | sum"
        ],
        [
            "sum",
            "sum '+' term | sum '-' term | term"
        ],
        [
            "term",
            "term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor"
        ],
        [
            "factor",
            "'+' factor | '-' factor | '~' factor | power"
        ],
        [
            "power",
            "await_primary '**' factor | await_primary"
        ],
        [
            "await_primary",
            "'await' primary | primary"
        ],
        [
            "primary",
            "primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom"
        ],
        [
            "genexp",
            "'(' (assignment_expression | expression !':=') for_if_clauses ')' | invalid_comprehension"
        ],
        [
            "assignment_expression",
            "NAME ':=' ~ expression"
        ],
        [
            "for_if_clauses",
            "for_if_clause+"
        ],
        [
            "for_if_clause",
            "'async' 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | invalid_for_target"
        ],
        [
            "star_targets",
            "star_target !',' | star_target ((',' star_target))* ','?"
        ],
        [
            "star_target",
            "'*' (!'*' star_target) | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "slices",
            "slice !',' | ','.(slice | starred_expression)+ ','?"
        ],
        [
            "slice",
            "expression? ':' expression? [':' expression?] | named_expression"
        ],
        [
            "named_expression",
            "assignment_expression | invalid_named_expression | expression !':='"
        ],
        [
            "invalid_named_expression",
            "expression ':=' expression | NAME '=' bitwise_or !('=' | ':=') | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=')"
        ],
        [
            "list",
            "'[' star_named_expressions? ']'"
        ],
        [
            "star_named_expressions",
            "','.star_named_expression+ ','?"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "tuple",
            "'(' [star_named_expression ',' star_named_expressions?] ')'"
        ],
        [
            "starred_expression",
            "invalid_starred_expression | '*' expression"
        ],
        [
            "invalid_starred_expression",
            "'*' expression '=' expression"
        ],
        [
            "arguments",
            "args ','? &')' | invalid_arguments"
        ],
        [
            "args",
            "','.(starred_expression | (assignment_expression | expression !':=') !'=')+ [',' kwargs] | kwargs"
        ],
        [
            "kwargs",
            "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+"
        ],
        [
            "kwarg_or_starred",
            "invalid_kwarg | NAME '=' expression | starred_expression"
        ],
        [
            "invalid_kwarg",
            "('True' | 'False' | 'None') '=' | NAME '=' expression for_if_clauses | !(NAME '=') expression '=' | '**' expression '=' expression"
        ],
        [
            "kwarg_or_double_starred",
            "invalid_kwarg | NAME '=' expression | '**' expression"
        ],
        [
            "invalid_arguments",
            "((','.(starred_expression | (assignment_expression | expression !':=') !'=')+ ',' kwargs) | kwargs) ',' '*' | expression for_if_clauses ',' [args | expression for_if_clauses] | NAME '=' expression for_if_clauses | [(args ',')] NAME '=' &(',' | ')') | args for_if_clauses | args ',' expression for_if_clauses | args ',' args"
        ],
        [
            "atom",
            "NAME | 'True' | 'False' | 'None' | &(STRING | FSTRING_START) strings | NUMBER | &'(' (tuple | group | genexp) | &'[' (list | listcomp) | &'{' (dict | set | dictcomp | setcomp) | '...'"
        ],
        [
            "strings",
            "((fstring | string))+"
        ],
        [
            "fstring",
            "FSTRING_START fstring_middle* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' (yield_expr | star_expressions) '='? fstring_conversion? fstring_full_format_spec? '}' | invalid_replacement_field"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' fstring_format_spec*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "invalid_replacement_field",
            "'{' '=' | '{' '!' | '{' ':' | '{' '}' | '{' !(yield_expr | star_expressions) | '{' (yield_expr | star_expressions) !('=' | '!' | ':' | '}') | '{' (yield_expr | star_expressions) '=' !('!' | ':' | '}') | '{' (yield_expr | star_expressions) '='? invalid_conversion_character | '{' (yield_expr | star_expressions) '='? ['!' NAME] !(':' | '}') | '{' (yield_expr | star_expressions) '='? ['!' NAME] ':' fstring_format_spec* !'}' | '{' (yield_expr | star_expressions) '='? ['!' NAME] !'}'"
        ],
        [
            "invalid_conversion_character",
            "'!' &(':' | '}') | '!' !NAME"
        ],
        [
            "string",
            "STRING"
        ],
        [
            "group",
            "'(' (yield_expr | named_expression) ')' | invalid_group"
        ],
        [
            "invalid_group",
            "'(' starred_expression ')' | '(' '**' expression ')'"
        ],
        [
            "listcomp",
            "'[' named_expression for_if_clauses ']' | invalid_comprehension"
        ],
        [
            "invalid_comprehension",
            "('[' | '(' | '{') starred_expression for_if_clauses | ('[' | '{') star_named_expression ',' star_named_expressions for_if_clauses | ('[' | '{') star_named_expression ',' for_if_clauses"
        ],
        [
            "dict",
            "'{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'"
        ],
        [
            "double_starred_kvpairs",
            "','.double_starred_kvpair+ ','?"
        ],
        [
            "double_starred_kvpair",
            "'**' bitwise_or | kvpair"
        ],
        [
            "kvpair",
            "expression ':' expression"
        ],
        [
            "invalid_double_starred_kvpairs",
            "','.double_starred_kvpair+ ',' invalid_kvpair | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "invalid_kvpair",
            "expression !(':') | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "set",
            "'{' star_named_expressions '}'"
        ],
        [
            "dictcomp",
            "'{' kvpair for_if_clauses '}' | invalid_dict_comprehension"
        ],
        [
            "invalid_dict_comprehension",
            "'{' '**' bitwise_or for_if_clauses '}'"
        ],
        [
            "setcomp",
            "'{' named_expression for_if_clauses '}' | invalid_comprehension"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' star_targets_tuple_seq? ')' | '[' star_targets_list_seq? ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target ((',' star_target))+ ','? | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "','.star_target+ ','?"
        ],
        [
            "disjunction",
            "conjunction (('or' conjunction))+ | conjunction"
        ],
        [
            "conjunction",
            "inversion (('and' inversion))+ | inversion"
        ],
        [
            "inversion",
            "'not' inversion | comparison"
        ],
        [
            "comparison",
            "bitwise_or compare_op_bitwise_or_pair+ | bitwise_or"
        ],
        [
            "compare_op_bitwise_or_pair",
            "eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or"
        ],
        [
            "eq_bitwise_or",
            "'==' bitwise_or"
        ],
        [
            "noteq_bitwise_or",
            "('!=') bitwise_or"
        ],
        [
            "lte_bitwise_or",
            "'<=' bitwise_or"
        ],
        [
            "lt_bitwise_or",
            "'<' bitwise_or"
        ],
        [
            "gte_bitwise_or",
            "'>=' bitwise_or"
        ],
        [
            "gt_bitwise_or",
            "'>' bitwise_or"
        ],
        [
            "notin_bitwise_or",
            "'not' 'in' bitwise_or"
        ],
        [
            "in_bitwise_or",
            "'in' bitwise_or"
        ],
        [
            "isnot_bitwise_or",
            "'is' 'not' bitwise_or"
        ],
        [
            "is_bitwise_or",
            "'is' bitwise_or"
        ],
        [
            "invalid_for_target",
            "'async'? 'for' star_expressions"
        ]
    ],
    "assert_stmt": [
        [
            "assert_stmt",
            "'assert' expression [',' expression]"
        ]
    ],
    "del_stmt": [
        [
            "del_stmt",
            "'del' del_targets &(';' | NEWLINE) | invalid_del_stmt"
        ],
        [
            "del_targets",
            "','.del_target+ ','?"
        ],
        [
            "del_target",
            "t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | del_t_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "slices",
            "slice !',' | ','.(slice | starred_expression)+ ','?"
        ],
        [
            "slice",
            "expression? ':' expression? [':' expression?] | named_expression"
        ],
        [
            "named_expression",
            "assignment_expression | invalid_named_expression | expression !':='"
        ],
        [
            "assignment_expression",
            "NAME ':=' ~ expression"
        ],
        [
            "invalid_named_expression",
            "expression ':=' expression | NAME '=' bitwise_or !('=' | ':=') | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=')"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "bitwise_and",
            "bitwise_and '&' shift_expr | shift_expr"
        ],
        [
            "shift_expr",
            "shift_expr '<<' sum | shift_expr '>>' sum | sum"
        ],
        [
            "sum",
            "sum '+' term | sum '-' term | term"
        ],
        [
            "term",
            "term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor"
        ],
        [
            "factor",
            "'+' factor | '-' factor | '~' factor | power"
        ],
        [
            "power",
            "await_primary '**' factor | await_primary"
        ],
        [
            "await_primary",
            "'await' primary | primary"
        ],
        [
            "primary",
            "primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom"
        ],
        [
            "genexp",
            "'(' (assignment_expression | expression !':=') for_if_clauses ')' | invalid_comprehension"
        ],
        [
            "for_if_clauses",
            "for_if_clause+"
        ],
        [
            "for_if_clause",
            "'async' 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | invalid_for_target"
        ],
        [
            "star_targets",
            "star_target !',' | star_target ((',' star_target))* ','?"
        ],
        [
            "star_target",
            "'*' (!'*' star_target) | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' star_targets_tuple_seq? ')' | '[' star_targets_list_seq? ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target ((',' star_target))+ ','? | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "','.star_target+ ','?"
        ],
        [
            "disjunction",
            "conjunction (('or' conjunction))+ | conjunction"
        ],
        [
            "conjunction",
            "inversion (('and' inversion))+ | inversion"
        ],
        [
            "inversion",
            "'not' inversion | comparison"
        ],
        [
            "comparison",
            "bitwise_or compare_op_bitwise_or_pair+ | bitwise_or"
        ],
        [
            "compare_op_bitwise_or_pair",
            "eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or"
        ],
        [
            "eq_bitwise_or",
            "'==' bitwise_or"
        ],
        [
            "noteq_bitwise_or",
            "('!=') bitwise_or"
        ],
        [
            "lte_bitwise_or",
            "'<=' bitwise_or"
        ],
        [
            "lt_bitwise_or",
            "'<' bitwise_or"
        ],
        [
            "gte_bitwise_or",
            "'>=' bitwise_or"
        ],
        [
            "gt_bitwise_or",
            "'>' bitwise_or"
        ],
        [
            "notin_bitwise_or",
            "'not' 'in' bitwise_or"
        ],
        [
            "in_bitwise_or",
            "'in' bitwise_or"
        ],
        [
            "isnot_bitwise_or",
            "'is' 'not' bitwise_or"
        ],
        [
            "is_bitwise_or",
            "'is' bitwise_or"
        ],
        [
            "invalid_for_target",
            "'async'? 'for' star_expressions"
        ],
        [
            "star_expressions",
            "star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "invalid_comprehension",
            "('[' | '(' | '{') starred_expression for_if_clauses | ('[' | '{') star_named_expression ',' star_named_expressions for_if_clauses | ('[' | '{') star_named_expression ',' for_if_clauses"
        ],
        [
            "starred_expression",
            "invalid_starred_expression | '*' expression"
        ],
        [
            "invalid_starred_expression",
            "'*' expression '=' expression"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "star_named_expressions",
            "','.star_named_expression+ ','?"
        ],
        [
            "arguments",
            "args ','? &')' | invalid_arguments"
        ],
        [
            "args",
            "','.(starred_expression | (assignment_expression | expression !':=') !'=')+ [',' kwargs] | kwargs"
        ],
        [
            "kwargs",
            "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+"
        ],
        [
            "kwarg_or_starred",
            "invalid_kwarg | NAME '=' expression | starred_expression"
        ],
        [
            "invalid_kwarg",
            "('True' | 'False' | 'None') '=' | NAME '=' expression for_if_clauses | !(NAME '=') expression '=' | '**' expression '=' expression"
        ],
        [
            "kwarg_or_double_starred",
            "invalid_kwarg | NAME '=' expression | '**' expression"
        ],
        [
            "invalid_arguments",
            "((','.(starred_expression | (assignment_expression | expression !':=') !'=')+ ',' kwargs) | kwargs) ',' '*' | expression for_if_clauses ',' [args | expression for_if_clauses] | NAME '=' expression for_if_clauses | [(args ',')] NAME '=' &(',' | ')') | args for_if_clauses | args ',' expression for_if_clauses | args ',' args"
        ],
        [
            "atom",
            "NAME | 'True' | 'False' | 'None' | &(STRING | FSTRING_START) strings | NUMBER | &'(' (tuple | group | genexp) | &'[' (list | listcomp) | &'{' (dict | set | dictcomp | setcomp) | '...'"
        ],
        [
            "strings",
            "((fstring | string))+"
        ],
        [
            "fstring",
            "FSTRING_START fstring_middle* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' (yield_expr | star_expressions) '='? fstring_conversion? fstring_full_format_spec? '}' | invalid_replacement_field"
        ],
        [
            "yield_expr",
            "'yield' 'from' expression | 'yield' star_expressions?"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' fstring_format_spec*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "invalid_replacement_field",
            "'{' '=' | '{' '!' | '{' ':' | '{' '}' | '{' !(yield_expr | star_expressions) | '{' (yield_expr | star_expressions) !('=' | '!' | ':' | '}') | '{' (yield_expr | star_expressions) '=' !('!' | ':' | '}') | '{' (yield_expr | star_expressions) '='? invalid_conversion_character | '{' (yield_expr | star_expressions) '='? ['!' NAME] !(':' | '}') | '{' (yield_expr | star_expressions) '='? ['!' NAME] ':' fstring_format_spec* !'}' | '{' (yield_expr | star_expressions) '='? ['!' NAME] !'}'"
        ],
        [
            "invalid_conversion_character",
            "'!' &(':' | '}') | '!' !NAME"
        ],
        [
            "string",
            "STRING"
        ],
        [
            "tuple",
            "'(' [star_named_expression ',' star_named_expressions?] ')'"
        ],
        [
            "group",
            "'(' (yield_expr | named_expression) ')' | invalid_group"
        ],
        [
            "invalid_group",
            "'(' starred_expression ')' | '(' '**' expression ')'"
        ],
        [
            "list",
            "'[' star_named_expressions? ']'"
        ],
        [
            "listcomp",
            "'[' named_expression for_if_clauses ']' | invalid_comprehension"
        ],
        [
            "dict",
            "'{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'"
        ],
        [
            "double_starred_kvpairs",
            "','.double_starred_kvpair+ ','?"
        ],
        [
            "double_starred_kvpair",
            "'**' bitwise_or | kvpair"
        ],
        [
            "kvpair",
            "expression ':' expression"
        ],
        [
            "invalid_double_starred_kvpairs",
            "','.double_starred_kvpair+ ',' invalid_kvpair | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "invalid_kvpair",
            "expression !(':') | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "set",
            "'{' star_named_expressions '}'"
        ],
        [
            "dictcomp",
            "'{' kvpair for_if_clauses '}' | invalid_dict_comprehension"
        ],
        [
            "invalid_dict_comprehension",
            "'{' '**' bitwise_or for_if_clauses '}'"
        ],
        [
            "setcomp",
            "'{' named_expression for_if_clauses '}' | invalid_comprehension"
        ],
        [
            "del_t_atom",
            "NAME | '(' del_target ')' | '(' del_targets? ')' | '[' del_targets? ']'"
        ],
        [
            "invalid_del_stmt",
            "'del' star_expressions"
        ]
    ],
    "return_stmt": [
        [
            "return_stmt",
            "'return' star_expressions?"
        ],
        [
            "star_expressions",
            "star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "bitwise_and",
            "bitwise_and '&' shift_expr | shift_expr"
        ],
        [
            "shift_expr",
            "shift_expr '<<' sum | shift_expr '>>' sum | sum"
        ],
        [
            "sum",
            "sum '+' term | sum '-' term | term"
        ],
        [
            "term",
            "term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor"
        ],
        [
            "factor",
            "'+' factor | '-' factor | '~' factor | power"
        ],
        [
            "power",
            "await_primary '**' factor | await_primary"
        ],
        [
            "await_primary",
            "'await' primary | primary"
        ],
        [
            "primary",
            "primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom"
        ],
        [
            "genexp",
            "'(' (assignment_expression | expression !':=') for_if_clauses ')' | invalid_comprehension"
        ],
        [
            "assignment_expression",
            "NAME ':=' ~ expression"
        ],
        [
            "for_if_clauses",
            "for_if_clause+"
        ],
        [
            "for_if_clause",
            "'async' 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | invalid_for_target"
        ],
        [
            "star_targets",
            "star_target !',' | star_target ((',' star_target))* ','?"
        ],
        [
            "star_target",
            "'*' (!'*' star_target) | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "slices",
            "slice !',' | ','.(slice | starred_expression)+ ','?"
        ],
        [
            "slice",
            "expression? ':' expression? [':' expression?] | named_expression"
        ],
        [
            "named_expression",
            "assignment_expression | invalid_named_expression | expression !':='"
        ],
        [
            "invalid_named_expression",
            "expression ':=' expression | NAME '=' bitwise_or !('=' | ':=') | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=')"
        ],
        [
            "list",
            "'[' star_named_expressions? ']'"
        ],
        [
            "star_named_expressions",
            "','.star_named_expression+ ','?"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "tuple",
            "'(' [star_named_expression ',' star_named_expressions?] ')'"
        ],
        [
            "starred_expression",
            "invalid_starred_expression | '*' expression"
        ],
        [
            "invalid_starred_expression",
            "'*' expression '=' expression"
        ],
        [
            "arguments",
            "args ','? &')' | invalid_arguments"
        ],
        [
            "args",
            "','.(starred_expression | (assignment_expression | expression !':=') !'=')+ [',' kwargs] | kwargs"
        ],
        [
            "kwargs",
            "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+"
        ],
        [
            "kwarg_or_starred",
            "invalid_kwarg | NAME '=' expression | starred_expression"
        ],
        [
            "invalid_kwarg",
            "('True' | 'False' | 'None') '=' | NAME '=' expression for_if_clauses | !(NAME '=') expression '=' | '**' expression '=' expression"
        ],
        [
            "kwarg_or_double_starred",
            "invalid_kwarg | NAME '=' expression | '**' expression"
        ],
        [
            "invalid_arguments",
            "((','.(starred_expression | (assignment_expression | expression !':=') !'=')+ ',' kwargs) | kwargs) ',' '*' | expression for_if_clauses ',' [args | expression for_if_clauses] | NAME '=' expression for_if_clauses | [(args ',')] NAME '=' &(',' | ')') | args for_if_clauses | args ',' expression for_if_clauses | args ',' args"
        ],
        [
            "atom",
            "NAME | 'True' | 'False' | 'None' | &(STRING | FSTRING_START) strings | NUMBER | &'(' (tuple | group | genexp) | &'[' (list | listcomp) | &'{' (dict | set | dictcomp | setcomp) | '...'"
        ],
        [
            "strings",
            "((fstring | string))+"
        ],
        [
            "fstring",
            "FSTRING_START fstring_middle* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' (yield_expr | star_expressions) '='? fstring_conversion? fstring_full_format_spec? '}' | invalid_replacement_field"
        ],
        [
            "yield_expr",
            "'yield' 'from' expression | 'yield' star_expressions?"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' fstring_format_spec*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "invalid_replacement_field",
            "'{' '=' | '{' '!' | '{' ':' | '{' '}' | '{' !(yield_expr | star_expressions) | '{' (yield_expr | star_expressions) !('=' | '!' | ':' | '}') | '{' (yield_expr | star_expressions) '=' !('!' | ':' | '}') | '{' (yield_expr | star_expressions) '='? invalid_conversion_character | '{' (yield_expr | star_expressions) '='? ['!' NAME] !(':' | '}') | '{' (yield_expr | star_expressions) '='? ['!' NAME] ':' fstring_format_spec* !'}' | '{' (yield_expr | star_expressions) '='? ['!' NAME] !'}'"
        ],
        [
            "invalid_conversion_character",
            "'!' &(':' | '}') | '!' !NAME"
        ],
        [
            "string",
            "STRING"
        ],
        [
            "group",
            "'(' (yield_expr | named_expression) ')' | invalid_group"
        ],
        [
            "invalid_group",
            "'(' starred_expression ')' | '(' '**' expression ')'"
        ],
        [
            "listcomp",
            "'[' named_expression for_if_clauses ']' | invalid_comprehension"
        ],
        [
            "invalid_comprehension",
            "('[' | '(' | '{') starred_expression for_if_clauses | ('[' | '{') star_named_expression ',' star_named_expressions for_if_clauses | ('[' | '{') star_named_expression ',' for_if_clauses"
        ],
        [
            "dict",
            "'{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'"
        ],
        [
            "double_starred_kvpairs",
            "','.double_starred_kvpair+ ','?"
        ],
        [
            "double_starred_kvpair",
            "'**' bitwise_or | kvpair"
        ],
        [
            "kvpair",
            "expression ':' expression"
        ],
        [
            "invalid_double_starred_kvpairs",
            "','.double_starred_kvpair+ ',' invalid_kvpair | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "invalid_kvpair",
            "expression !(':') | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "set",
            "'{' star_named_expressions '}'"
        ],
        [
            "dictcomp",
            "'{' kvpair for_if_clauses '}' | invalid_dict_comprehension"
        ],
        [
            "invalid_dict_comprehension",
            "'{' '**' bitwise_or for_if_clauses '}'"
        ],
        [
            "setcomp",
            "'{' named_expression for_if_clauses '}' | invalid_comprehension"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' star_targets_tuple_seq? ')' | '[' star_targets_list_seq? ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target ((',' star_target))+ ','? | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "','.star_target+ ','?"
        ],
        [
            "disjunction",
            "conjunction (('or' conjunction))+ | conjunction"
        ],
        [
            "conjunction",
            "inversion (('and' inversion))+ | inversion"
        ],
        [
            "inversion",
            "'not' inversion | comparison"
        ],
        [
            "comparison",
            "bitwise_or compare_op_bitwise_or_pair+ | bitwise_or"
        ],
        [
            "compare_op_bitwise_or_pair",
            "eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or"
        ],
        [
            "eq_bitwise_or",
            "'==' bitwise_or"
        ],
        [
            "noteq_bitwise_or",
            "('!=') bitwise_or"
        ],
        [
            "lte_bitwise_or",
            "'<=' bitwise_or"
        ],
        [
            "lt_bitwise_or",
            "'<' bitwise_or"
        ],
        [
            "gte_bitwise_or",
            "'>=' bitwise_or"
        ],
        [
            "gt_bitwise_or",
            "'>' bitwise_or"
        ],
        [
            "notin_bitwise_or",
            "'not' 'in' bitwise_or"
        ],
        [
            "in_bitwise_or",
            "'in' bitwise_or"
        ],
        [
            "isnot_bitwise_or",
            "'is' 'not' bitwise_or"
        ],
        [
            "is_bitwise_or",
            "'is' bitwise_or"
        ],
        [
            "invalid_for_target",
            "'async'? 'for' star_expressions"
        ]
    ],
    "yield_stmt": [
        [
            "yield_stmt",
            "yield_expr"
        ],
        [
            "yield_expr",
            "'yield' 'from' expression | 'yield' star_expressions?"
        ],
        [
            "star_expressions",
            "star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "bitwise_and",
            "bitwise_and '&' shift_expr | shift_expr"
        ],
        [
            "shift_expr",
            "shift_expr '<<' sum | shift_expr '>>' sum | sum"
        ],
        [
            "sum",
            "sum '+' term | sum '-' term | term"
        ],
        [
            "term",
            "term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor"
        ],
        [
            "factor",
            "'+' factor | '-' factor | '~' factor | power"
        ],
        [
            "power",
            "await_primary '**' factor | await_primary"
        ],
        [
            "await_primary",
            "'await' primary | primary"
        ],
        [
            "primary",
            "primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom"
        ],
        [
            "genexp",
            "'(' (assignment_expression | expression !':=') for_if_clauses ')' | invalid_comprehension"
        ],
        [
            "assignment_expression",
            "NAME ':=' ~ expression"
        ],
        [
            "for_if_clauses",
            "for_if_clause+"
        ],
        [
            "for_if_clause",
            "'async' 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | invalid_for_target"
        ],
        [
            "star_targets",
            "star_target !',' | star_target ((',' star_target))* ','?"
        ],
        [
            "star_target",
            "'*' (!'*' star_target) | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "slices",
            "slice !',' | ','.(slice | starred_expression)+ ','?"
        ],
        [
            "slice",
            "expression? ':' expression? [':' expression?] | named_expression"
        ],
        [
            "named_expression",
            "assignment_expression | invalid_named_expression | expression !':='"
        ],
        [
            "invalid_named_expression",
            "expression ':=' expression | NAME '=' bitwise_or !('=' | ':=') | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=')"
        ],
        [
            "list",
            "'[' star_named_expressions? ']'"
        ],
        [
            "star_named_expressions",
            "','.star_named_expression+ ','?"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "tuple",
            "'(' [star_named_expression ',' star_named_expressions?] ')'"
        ],
        [
            "starred_expression",
            "invalid_starred_expression | '*' expression"
        ],
        [
            "invalid_starred_expression",
            "'*' expression '=' expression"
        ],
        [
            "arguments",
            "args ','? &')' | invalid_arguments"
        ],
        [
            "args",
            "','.(starred_expression | (assignment_expression | expression !':=') !'=')+ [',' kwargs] | kwargs"
        ],
        [
            "kwargs",
            "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+"
        ],
        [
            "kwarg_or_starred",
            "invalid_kwarg | NAME '=' expression | starred_expression"
        ],
        [
            "invalid_kwarg",
            "('True' | 'False' | 'None') '=' | NAME '=' expression for_if_clauses | !(NAME '=') expression '=' | '**' expression '=' expression"
        ],
        [
            "kwarg_or_double_starred",
            "invalid_kwarg | NAME '=' expression | '**' expression"
        ],
        [
            "invalid_arguments",
            "((','.(starred_expression | (assignment_expression | expression !':=') !'=')+ ',' kwargs) | kwargs) ',' '*' | expression for_if_clauses ',' [args | expression for_if_clauses] | NAME '=' expression for_if_clauses | [(args ',')] NAME '=' &(',' | ')') | args for_if_clauses | args ',' expression for_if_clauses | args ',' args"
        ],
        [
            "atom",
            "NAME | 'True' | 'False' | 'None' | &(STRING | FSTRING_START) strings | NUMBER | &'(' (tuple | group | genexp) | &'[' (list | listcomp) | &'{' (dict | set | dictcomp | setcomp) | '...'"
        ],
        [
            "strings",
            "((fstring | string))+"
        ],
        [
            "fstring",
            "FSTRING_START fstring_middle* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' (yield_expr | star_expressions) '='? fstring_conversion? fstring_full_format_spec? '}' | invalid_replacement_field"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' fstring_format_spec*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "invalid_replacement_field",
            "'{' '=' | '{' '!' | '{' ':' | '{' '}' | '{' !(yield_expr | star_expressions) | '{' (yield_expr | star_expressions) !('=' | '!' | ':' | '}') | '{' (yield_expr | star_expressions) '=' !('!' | ':' | '}') | '{' (yield_expr | star_expressions) '='? invalid_conversion_character | '{' (yield_expr | star_expressions) '='? ['!' NAME] !(':' | '}') | '{' (yield_expr | star_expressions) '='? ['!' NAME] ':' fstring_format_spec* !'}' | '{' (yield_expr | star_expressions) '='? ['!' NAME] !'}'"
        ],
        [
            "invalid_conversion_character",
            "'!' &(':' | '}') | '!' !NAME"
        ],
        [
            "string",
            "STRING"
        ],
        [
            "group",
            "'(' (yield_expr | named_expression) ')' | invalid_group"
        ],
        [
            "invalid_group",
            "'(' starred_expression ')' | '(' '**' expression ')'"
        ],
        [
            "listcomp",
            "'[' named_expression for_if_clauses ']' | invalid_comprehension"
        ],
        [
            "invalid_comprehension",
            "('[' | '(' | '{') starred_expression for_if_clauses | ('[' | '{') star_named_expression ',' star_named_expressions for_if_clauses | ('[' | '{') star_named_expression ',' for_if_clauses"
        ],
        [
            "dict",
            "'{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'"
        ],
        [
            "double_starred_kvpairs",
            "','.double_starred_kvpair+ ','?"
        ],
        [
            "double_starred_kvpair",
            "'**' bitwise_or | kvpair"
        ],
        [
            "kvpair",
            "expression ':' expression"
        ],
        [
            "invalid_double_starred_kvpairs",
            "','.double_starred_kvpair+ ',' invalid_kvpair | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "invalid_kvpair",
            "expression !(':') | expression ':' '*' bitwise_or | expression ':' &('}' | ',')"
        ],
        [
            "set",
            "'{' star_named_expressions '}'"
        ],
        [
            "dictcomp",
            "'{' kvpair for_if_clauses '}' | invalid_dict_comprehension"
        ],
        [
            "invalid_dict_comprehension",
            "'{' '**' bitwise_or for_if_clauses '}'"
        ],
        [
            "setcomp",
            "'{' named_expression for_if_clauses '}' | invalid_comprehension"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' star_targets_tuple_seq? ')' | '[' star_targets_list_seq? ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target ((',' star_target))+ ','? | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "','.star_target+ ','?"
        ],
        [
            "disjunction",
            "conjunction (('or' conjunction))+ | conjunction"
        ],
        [
            "conjunction",
            "inversion (('and' inversion))+ | inversion"
        ],
        [
            "inversion",
            "'not' inversion | comparison"
        ],
        [
            "comparison",
            "bitwise_or compare_op_bitwise_or_pair+ | bitwise_or"
        ],
        [
            "compare_op_bitwise_or_pair",
            "eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or"
        ],
        [
            "eq_bitwise_or",
            "'==' bitwise_or"
        ],
        [
            "noteq_bitwise_or",
            "('!=') bitwise_or"
        ],
        [
            "lte_bitwise_or",
            "'<=' bitwise_or"
        ],
        [
            "lt_bitwise_or",
            "'<' bitwise_or"
        ],
        [
            "gte_bitwise_or",
            "'>=' bitwise_or"
        ],
        [
            "gt_bitwise_or",
            "'>' bitwise_or"
        ],
        [
            "notin_bitwise_or",
            "'not' 'in' bitwise_or"
        ],
        [
            "in_bitwise_or",
            "'in' bitwise_or"
        ],
        [
            "isnot_bitwise_or",
            "'is' 'not' bitwise_or"
        ],
        [
            "is_bitwise_or",
            "'is' bitwise_or"
        ],
        [
            "invalid_for_target",
            "'async'? 'for' star_expressions"
        ]
    ],
    "raise_stmt": [
        [
            "raise_stmt",
            "'raise' expression ['from' expression] | 'raise'"
        ]
    ],
    "import_stmt": [
        [
            "import_stmt",
            "invalid_import | import_name | import_from"
        ],
        [
            "invalid_import",
            "'import' ','.dotted_name+ 'from' dotted_name"
        ],
        [
            "dotted_name",
            "dotted_name '.' NAME | NAME"
        ],
        [
            "import_name",
            "'import' dotted_as_names"
        ],
        [
            "dotted_as_names",
            "','.dotted_as_name+"
        ],
        [
            "dotted_as_name",
            "dotted_name ['as' NAME]"
        ],
        [
            "import_from",
            "'from' (('.' | '...'))* dotted_name 'import' import_from_targets | 'from' (('.' | '...'))+ 'import' import_from_targets"
        ],
        [
            "import_from_targets",
            "'(' import_from_as_names ','? ')' | import_from_as_names !',' | '*' | invalid_import_from_targets"
        ],
        [
            "import_from_as_names",
            "','.import_from_as_name+"
        ],
        [
            "import_from_as_name",
            "NAME ['as' NAME]"
        ],
        [
            "invalid_import_from_targets",
            "import_from_as_names ',' NEWLINE"
        ]
    ],
    "global_stmt": [
        [
            "global_stmt",
            "'global' ','.NAME+"
        ]
    ],
    "nonlocal_stmt": [
        [
            "nonlocal_stmt",
            "'nonlocal' ','.NAME+"
        ]
    ],
    "type_alias": [
        [
            "type_alias",
            "\"type\" NAME type_params? '=' expression"
        ]
    ]
}