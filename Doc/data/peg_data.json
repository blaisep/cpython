{
    "#": "This file was generated by docs_fragment_generator.py",
    "file_input": [
        [
            "file_input",
            "[statements] ENDMARKER"
        ],
        [
            "statements",
            "(statement)+"
        ],
        [
            "statement",
            "compound_stmt | simple_stmts"
        ]
    ],
    "interactive_input": [
        [
            "interactive_input",
            "statement_newline"
        ],
        [
            "statement_newline",
            "compound_stmt NEWLINE | simple_stmts | NEWLINE | ENDMARKER"
        ]
    ],
    "eval_input": [
        [
            "eval_input",
            "expressions (NEWLINE)* ENDMARKER"
        ]
    ],
    "compound_stmt": [
        [
            "compound_stmt",
            "function_def | if_stmt | class_def | with_stmt | for_stmt | try_stmt | while_stmt | match_stmt"
        ]
    ],
    "if_stmt": [
        [
            "if_stmt",
            "'if' named_expression ':' block elif_stmt | 'if' named_expression ':' block [else_block]"
        ],
        [
            "named_expression",
            "assignment_expression | expression"
        ],
        [
            "block",
            "NEWLINE INDENT statements DEDENT | simple_stmts"
        ],
        [
            "statements",
            "(statement)+"
        ],
        [
            "statement",
            "compound_stmt | simple_stmts"
        ],
        [
            "elif_stmt",
            "'elif' named_expression ':' block elif_stmt | 'elif' named_expression ':' block [else_block]"
        ],
        [
            "else_block",
            "'else' ':' block"
        ]
    ],
    "while_stmt": [
        [
            "while_stmt",
            "'while' named_expression ':' block [else_block]"
        ],
        [
            "named_expression",
            "assignment_expression | expression"
        ],
        [
            "block",
            "NEWLINE INDENT statements DEDENT | simple_stmts"
        ],
        [
            "statements",
            "(statement)+"
        ],
        [
            "statement",
            "compound_stmt | simple_stmts"
        ],
        [
            "else_block",
            "'else' ':' block"
        ]
    ],
    "for_stmt": [
        [
            "for_stmt",
            "'for' star_targets 'in' star_expressions ':' [TYPE_COMMENT] block [else_block] | 'async' 'for' star_targets 'in' star_expressions ':' [TYPE_COMMENT] block [else_block]"
        ],
        [
            "star_targets",
            "star_target | star_target (',' star_target)* [',']"
        ],
        [
            "star_target",
            "'*' star_target | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME | t_primary '[' slices ']' | star_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME | t_primary '[' slices ']' | t_primary genexp | t_primary '(' [arguments] ')' | atom"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "arguments",
            "args [',']"
        ],
        [
            "args",
            "(',').(starred_expression | assignment_expression | expression)+ [',' kwargs] | kwargs"
        ],
        [
            "starred_expression",
            "'*' expression"
        ],
        [
            "kwargs",
            "(',').(kwarg_or_starred)+ ',' (',').(kwarg_or_double_starred)+ | (',').(kwarg_or_starred)+ | (',').(kwarg_or_double_starred)+"
        ],
        [
            "kwarg_or_starred",
            "NAME '=' expression | starred_expression"
        ],
        [
            "kwarg_or_double_starred",
            "NAME '=' expression | '**' expression"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' [star_targets_tuple_seq] ')' | '[' [star_targets_list_seq] ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target (',' star_target)+ [','] | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "(',').(star_target)+ [',']"
        ],
        [
            "star_expressions",
            "star_expression (',' star_expression)+ [','] | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "block",
            "NEWLINE INDENT statements DEDENT | simple_stmts"
        ],
        [
            "statements",
            "(statement)+"
        ],
        [
            "statement",
            "compound_stmt | simple_stmts"
        ],
        [
            "else_block",
            "'else' ':' block"
        ]
    ],
    "try_stmt": [
        [
            "try_stmt",
            "'try' ':' block finally_block | 'try' ':' block (except_block)+ [else_block] [finally_block] | 'try' ':' block (except_star_block)+ [else_block] [finally_block]"
        ],
        [
            "block",
            "NEWLINE INDENT statements DEDENT | simple_stmts"
        ],
        [
            "statements",
            "(statement)+"
        ],
        [
            "statement",
            "compound_stmt | simple_stmts"
        ],
        [
            "finally_block",
            "'finally' ':' block"
        ],
        [
            "except_block",
            "'except' expression ['as' NAME] ':' block | 'except' ':' block"
        ],
        [
            "else_block",
            "'else' ':' block"
        ],
        [
            "except_star_block",
            "'except' '*' expression ['as' NAME] ':' block"
        ]
    ],
    "with_stmt": [
        [
            "with_stmt",
            "'with' '(' (',').(with_item)+ [','] ')' ':' block | 'with' (',').(with_item)+ ':' [TYPE_COMMENT] block | 'async' 'with' '(' (',').(with_item)+ [','] ')' ':' block | 'async' 'with' (',').(with_item)+ ':' [TYPE_COMMENT] block"
        ],
        [
            "with_item",
            "expression 'as' star_target | expression"
        ],
        [
            "star_target",
            "'*' star_target | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME | t_primary '[' slices ']' | star_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME | t_primary '[' slices ']' | t_primary genexp | t_primary '(' [arguments] ')' | atom"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "arguments",
            "args [',']"
        ],
        [
            "args",
            "(',').(starred_expression | assignment_expression | expression)+ [',' kwargs] | kwargs"
        ],
        [
            "starred_expression",
            "'*' expression"
        ],
        [
            "kwargs",
            "(',').(kwarg_or_starred)+ ',' (',').(kwarg_or_double_starred)+ | (',').(kwarg_or_starred)+ | (',').(kwarg_or_double_starred)+"
        ],
        [
            "kwarg_or_starred",
            "NAME '=' expression | starred_expression"
        ],
        [
            "kwarg_or_double_starred",
            "NAME '=' expression | '**' expression"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' [star_targets_tuple_seq] ')' | '[' [star_targets_list_seq] ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target (',' star_target)+ [','] | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "(',').(star_target)+ [',']"
        ],
        [
            "block",
            "NEWLINE INDENT statements DEDENT | simple_stmts"
        ],
        [
            "statements",
            "(statement)+"
        ],
        [
            "statement",
            "compound_stmt | simple_stmts"
        ]
    ],
    "match_stmt": [
        [
            "match_stmt",
            "\"match\" subject_expr ':' NEWLINE INDENT (case_block)+ DEDENT"
        ],
        [
            "subject_expr",
            "star_named_expression ',' [star_named_expressions] | named_expression"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "named_expression",
            "assignment_expression | expression"
        ],
        [
            "star_named_expressions",
            "(',').(star_named_expression)+ [',']"
        ],
        [
            "case_block",
            "\"case\" patterns [guard] ':' block"
        ],
        [
            "block",
            "NEWLINE INDENT statements DEDENT | simple_stmts"
        ],
        [
            "statements",
            "(statement)+"
        ],
        [
            "statement",
            "compound_stmt | simple_stmts"
        ]
    ],
    "guard": [
        [
            "guard",
            "'if' named_expression"
        ],
        [
            "named_expression",
            "assignment_expression | expression"
        ]
    ],
    "patterns": [
        [
            "patterns",
            "open_sequence_pattern | pattern"
        ],
        [
            "open_sequence_pattern",
            "maybe_star_pattern ',' [maybe_sequence_pattern]"
        ],
        [
            "maybe_star_pattern",
            "star_pattern | pattern"
        ],
        [
            "star_pattern",
            "'*' pattern_capture_target | '*' wildcard_pattern"
        ],
        [
            "pattern_capture_target",
            "NAME"
        ],
        [
            "pattern",
            "as_pattern | or_pattern"
        ],
        [
            "maybe_sequence_pattern",
            "(',').(maybe_star_pattern)+ [',']"
        ]
    ],
    "or_pattern": [
        [
            "or_pattern",
            "('|').(closed_pattern)+"
        ],
        [
            "closed_pattern",
            "literal_pattern | capture_pattern | wildcard_pattern | value_pattern | group_pattern | sequence_pattern | mapping_pattern | class_pattern"
        ]
    ],
    "as_pattern": [
        [
            "as_pattern",
            "or_pattern 'as' pattern_capture_target"
        ],
        [
            "pattern_capture_target",
            "NAME"
        ]
    ],
    "literal_pattern": [
        [
            "literal_pattern",
            "signed_number | complex_number | strings | 'None' | 'True' | 'False'"
        ],
        [
            "signed_number",
            "NUMBER | '-' NUMBER"
        ],
        [
            "complex_number",
            "signed_real_number '+' imaginary_number | signed_real_number '-' imaginary_number"
        ],
        [
            "signed_real_number",
            "real_number | '-' real_number"
        ],
        [
            "real_number",
            "NUMBER"
        ],
        [
            "imaginary_number",
            "NUMBER"
        ],
        [
            "strings",
            "(fstring | string)+"
        ],
        [
            "fstring",
            "FSTRING_START (fstring_middle)* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' yield_expr | star_expressions ['='] [fstring_conversion] [fstring_full_format_spec] '}'"
        ],
        [
            "star_expressions",
            "star_expression (',' star_expression)+ [','] | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' (fstring_format_spec)*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "string",
            "STRING"
        ]
    ],
    "capture_pattern": [
        [
            "capture_pattern",
            "pattern_capture_target"
        ],
        [
            "pattern_capture_target",
            "NAME"
        ]
    ],
    "wildcard_pattern": [
        [
            "wildcard_pattern",
            "\"_\""
        ]
    ],
    "value_pattern": [
        [
            "value_pattern",
            "attr"
        ],
        [
            "attr",
            "name_or_attr '.' NAME"
        ],
        [
            "name_or_attr",
            "attr | NAME"
        ]
    ],
    "group_pattern": [
        [
            "group_pattern",
            "'(' pattern ')'"
        ],
        [
            "pattern",
            "as_pattern | or_pattern"
        ]
    ],
    "sequence_pattern": [
        [
            "sequence_pattern",
            "'[' [maybe_sequence_pattern] ']' | '(' [open_sequence_pattern] ')'"
        ],
        [
            "maybe_sequence_pattern",
            "(',').(maybe_star_pattern)+ [',']"
        ],
        [
            "maybe_star_pattern",
            "star_pattern | pattern"
        ],
        [
            "star_pattern",
            "'*' pattern_capture_target | '*' wildcard_pattern"
        ],
        [
            "pattern_capture_target",
            "NAME"
        ],
        [
            "pattern",
            "as_pattern | or_pattern"
        ],
        [
            "open_sequence_pattern",
            "maybe_star_pattern ',' [maybe_sequence_pattern]"
        ]
    ],
    "mapping_pattern": [
        [
            "mapping_pattern",
            "'{' '}' | '{' double_star_pattern [','] '}' | '{' items_pattern ',' double_star_pattern [','] '}' | '{' items_pattern [','] '}'"
        ],
        [
            "double_star_pattern",
            "'**' pattern_capture_target"
        ],
        [
            "pattern_capture_target",
            "NAME"
        ],
        [
            "items_pattern",
            "(',').(key_value_pattern)+"
        ],
        [
            "key_value_pattern",
            "literal_expr | attr ':' pattern"
        ],
        [
            "attr",
            "name_or_attr '.' NAME"
        ],
        [
            "name_or_attr",
            "attr | NAME"
        ],
        [
            "pattern",
            "as_pattern | or_pattern"
        ]
    ],
    "class_pattern": [
        [
            "class_pattern",
            "name_or_attr '(' ')' | name_or_attr '(' positional_patterns [','] ')' | name_or_attr '(' keyword_patterns [','] ')' | name_or_attr '(' positional_patterns ',' keyword_patterns [','] ')'"
        ],
        [
            "name_or_attr",
            "attr | NAME"
        ],
        [
            "attr",
            "name_or_attr '.' NAME"
        ],
        [
            "positional_patterns",
            "(',').(pattern)+"
        ],
        [
            "pattern",
            "as_pattern | or_pattern"
        ],
        [
            "keyword_patterns",
            "(',').(keyword_pattern)+"
        ],
        [
            "keyword_pattern",
            "NAME '=' pattern"
        ]
    ],
    "function_def": [
        [
            "function_def",
            "decorators function_def_raw | function_def_raw"
        ],
        [
            "decorators",
            "('@' named_expression NEWLINE)+"
        ],
        [
            "named_expression",
            "assignment_expression | expression"
        ],
        [
            "function_def_raw",
            "'def' NAME [type_params] '(' [params] ')' ['->' expression] ':' [func_type_comment] block | 'async' 'def' NAME [type_params] '(' [params] ')' ['->' expression] ':' [func_type_comment] block"
        ],
        [
            "params",
            "parameters"
        ],
        [
            "parameters",
            "slash_no_default (param_no_default)* (param_with_default)* [star_etc] | slash_with_default (param_with_default)* [star_etc] | (param_no_default)+ (param_with_default)* [star_etc] | (param_with_default)+ [star_etc] | star_etc"
        ],
        [
            "slash_no_default",
            "(param_no_default)+ '/' ',' | (param_no_default)+ '/'"
        ],
        [
            "param_no_default",
            "param ',' [TYPE_COMMENT] | param [TYPE_COMMENT]"
        ],
        [
            "param",
            "NAME [annotation]"
        ],
        [
            "annotation",
            "':' expression"
        ],
        [
            "param_with_default",
            "param default ',' [TYPE_COMMENT] | param default [TYPE_COMMENT]"
        ],
        [
            "default",
            "'=' expression"
        ],
        [
            "star_etc",
            "'*' param_no_default (param_maybe_default)* [kwds] | '*' param_no_default_star_annotation (param_maybe_default)* [kwds] | '*' ',' (param_maybe_default)+ [kwds] | kwds"
        ],
        [
            "param_maybe_default",
            "param [default] ',' [TYPE_COMMENT] | param [default] [TYPE_COMMENT]"
        ],
        [
            "kwds",
            "'**' param_no_default"
        ],
        [
            "param_no_default_star_annotation",
            "param_star_annotation ',' [TYPE_COMMENT] | param_star_annotation [TYPE_COMMENT]"
        ],
        [
            "param_star_annotation",
            "NAME star_annotation"
        ],
        [
            "star_annotation",
            "':' star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "slash_with_default",
            "(param_no_default)* (param_with_default)+ '/' ',' | (param_no_default)* (param_with_default)+ '/'"
        ],
        [
            "func_type_comment",
            "NEWLINE TYPE_COMMENT | TYPE_COMMENT"
        ],
        [
            "block",
            "NEWLINE INDENT statements DEDENT | simple_stmts"
        ],
        [
            "statements",
            "(statement)+"
        ],
        [
            "statement",
            "compound_stmt | simple_stmts"
        ]
    ],
    "class_def": [
        [
            "class_def",
            "decorators class_def_raw | class_def_raw"
        ],
        [
            "decorators",
            "('@' named_expression NEWLINE)+"
        ],
        [
            "named_expression",
            "assignment_expression | expression"
        ],
        [
            "class_def_raw",
            "'class' NAME [type_params] ['(' [arguments] ')'] ':' block"
        ],
        [
            "arguments",
            "args [',']"
        ],
        [
            "args",
            "(',').(starred_expression | assignment_expression | expression)+ [',' kwargs] | kwargs"
        ],
        [
            "starred_expression",
            "'*' expression"
        ],
        [
            "kwargs",
            "(',').(kwarg_or_starred)+ ',' (',').(kwarg_or_double_starred)+ | (',').(kwarg_or_starred)+ | (',').(kwarg_or_double_starred)+"
        ],
        [
            "kwarg_or_starred",
            "NAME '=' expression | starred_expression"
        ],
        [
            "kwarg_or_double_starred",
            "NAME '=' expression | '**' expression"
        ],
        [
            "block",
            "NEWLINE INDENT statements DEDENT | simple_stmts"
        ],
        [
            "statements",
            "(statement)+"
        ],
        [
            "statement",
            "compound_stmt | simple_stmts"
        ]
    ],
    "type_params": [
        [
            "type_params",
            "'[' type_param_seq ']'"
        ],
        [
            "type_param_seq",
            "(',').(type_param)+ [',']"
        ],
        [
            "type_param",
            "NAME [type_param_bound] | '*' NAME ':' expression | '*' NAME | '**' NAME ':' expression | '**' NAME"
        ],
        [
            "type_param_bound",
            "':' expression"
        ]
    ],
    "simple_stmts": [
        [
            "simple_stmts",
            "simple_stmt NEWLINE | (';').(simple_stmt)+ [';'] NEWLINE"
        ],
        [
            "simple_stmt",
            "assignment | type_alias | star_expressions | return_stmt | import_stmt | raise_stmt | 'pass' | del_stmt | yield_stmt | assert_stmt | 'break' | 'continue' | global_stmt | nonlocal_stmt"
        ],
        [
            "star_expressions",
            "star_expression (',' star_expression)+ [','] | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ]
    ],
    "assignment": [
        [
            "assignment",
            "NAME ':' expression ['=' annotated_rhs] | '(' single_target ')' | single_subscript_attribute_target ':' expression ['=' annotated_rhs] | (star_targets '=')+ yield_expr | star_expressions [TYPE_COMMENT] | augmented_assignment"
        ],
        [
            "single_target",
            "single_subscript_attribute_target | NAME | '(' single_target ')'"
        ],
        [
            "single_subscript_attribute_target",
            "t_primary '.' NAME | t_primary '[' slices ']'"
        ],
        [
            "t_primary",
            "t_primary '.' NAME | t_primary '[' slices ']' | t_primary genexp | t_primary '(' [arguments] ')' | atom"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "arguments",
            "args [',']"
        ],
        [
            "args",
            "(',').(starred_expression | assignment_expression | expression)+ [',' kwargs] | kwargs"
        ],
        [
            "starred_expression",
            "'*' expression"
        ],
        [
            "kwargs",
            "(',').(kwarg_or_starred)+ ',' (',').(kwarg_or_double_starred)+ | (',').(kwarg_or_starred)+ | (',').(kwarg_or_double_starred)+"
        ],
        [
            "kwarg_or_starred",
            "NAME '=' expression | starred_expression"
        ],
        [
            "kwarg_or_double_starred",
            "NAME '=' expression | '**' expression"
        ],
        [
            "star_targets",
            "star_target | star_target (',' star_target)* [',']"
        ],
        [
            "star_target",
            "'*' star_target | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME | t_primary '[' slices ']' | star_atom"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' [star_targets_tuple_seq] ')' | '[' [star_targets_list_seq] ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target (',' star_target)+ [','] | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "(',').(star_target)+ [',']"
        ],
        [
            "star_expressions",
            "star_expression (',' star_expression)+ [','] | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ]
    ],
    "expression": [
        [
            "expression",
            "conditional_expr | disjunction | lambdef"
        ]
    ],
    "augmented_assignment": [
        [
            "augmented_assignment",
            "single_target augassign yield_expr | star_expressions"
        ],
        [
            "single_target",
            "single_subscript_attribute_target | NAME | '(' single_target ')'"
        ],
        [
            "single_subscript_attribute_target",
            "t_primary '.' NAME | t_primary '[' slices ']'"
        ],
        [
            "t_primary",
            "t_primary '.' NAME | t_primary '[' slices ']' | t_primary genexp | t_primary '(' [arguments] ')' | atom"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "arguments",
            "args [',']"
        ],
        [
            "args",
            "(',').(starred_expression | assignment_expression | expression)+ [',' kwargs] | kwargs"
        ],
        [
            "starred_expression",
            "'*' expression"
        ],
        [
            "kwargs",
            "(',').(kwarg_or_starred)+ ',' (',').(kwarg_or_double_starred)+ | (',').(kwarg_or_starred)+ | (',').(kwarg_or_double_starred)+"
        ],
        [
            "kwarg_or_starred",
            "NAME '=' expression | starred_expression"
        ],
        [
            "kwarg_or_double_starred",
            "NAME '=' expression | '**' expression"
        ],
        [
            "augassign",
            "'+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//='"
        ],
        [
            "star_expressions",
            "star_expression (',' star_expression)+ [','] | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ]
    ],
    "annotated_rhs": [
        [
            "annotated_rhs",
            "yield_expr | star_expressions"
        ],
        [
            "star_expressions",
            "star_expression (',' star_expression)+ [','] | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ]
    ],
    "assert_stmt": [
        [
            "assert_stmt",
            "'assert' expression [',' expression]"
        ]
    ],
    "del_stmt": [
        [
            "del_stmt",
            "'del' del_targets"
        ],
        [
            "del_targets",
            "(',').(del_target)+ [',']"
        ],
        [
            "del_target",
            "t_primary '.' NAME | t_primary '[' slices ']' | del_t_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME | t_primary '[' slices ']' | t_primary genexp | t_primary '(' [arguments] ')' | atom"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "arguments",
            "args [',']"
        ],
        [
            "args",
            "(',').(starred_expression | assignment_expression | expression)+ [',' kwargs] | kwargs"
        ],
        [
            "starred_expression",
            "'*' expression"
        ],
        [
            "kwargs",
            "(',').(kwarg_or_starred)+ ',' (',').(kwarg_or_double_starred)+ | (',').(kwarg_or_starred)+ | (',').(kwarg_or_double_starred)+"
        ],
        [
            "kwarg_or_starred",
            "NAME '=' expression | starred_expression"
        ],
        [
            "kwarg_or_double_starred",
            "NAME '=' expression | '**' expression"
        ],
        [
            "del_t_atom",
            "NAME | '(' del_target ')' | '(' [del_targets] ')' | '[' [del_targets] ']'"
        ]
    ],
    "return_stmt": [
        [
            "return_stmt",
            "'return' [star_expressions]"
        ],
        [
            "star_expressions",
            "star_expression (',' star_expression)+ [','] | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ]
    ],
    "yield_stmt": [
        [
            "yield_stmt",
            "yield_expr"
        ]
    ],
    "raise_stmt": [
        [
            "raise_stmt",
            "'raise' expression ['from' expression] | 'raise'"
        ]
    ],
    "import_stmt": [
        [
            "import_stmt",
            "import_name | import_from"
        ],
        [
            "import_name",
            "'import' dotted_as_names"
        ],
        [
            "dotted_as_names",
            "(',').(dotted_as_name)+"
        ],
        [
            "dotted_as_name",
            "dotted_name ['as' NAME]"
        ],
        [
            "dotted_name",
            "dotted_name '.' NAME | NAME"
        ],
        [
            "import_from",
            "'from' ('.' | '...')* dotted_name 'import' import_from_targets | 'from' ('.' | '...')+ 'import' import_from_targets"
        ],
        [
            "import_from_targets",
            "'(' import_from_as_names [','] ')' | import_from_as_names | '*'"
        ],
        [
            "import_from_as_names",
            "(',').(import_from_as_name)+"
        ],
        [
            "import_from_as_name",
            "NAME ['as' NAME]"
        ]
    ],
    "global_stmt": [
        [
            "global_stmt",
            "'global' (',').(NAME)+"
        ]
    ],
    "nonlocal_stmt": [
        [
            "nonlocal_stmt",
            "'nonlocal' (',').(NAME)+"
        ]
    ],
    "type_alias": [
        [
            "type_alias",
            "\"type\" NAME [type_params] '=' expression"
        ]
    ],
    "atom": [
        [
            "atom",
            "NAME | 'True' | 'False' | 'None' | strings | NUMBER | tuple | group | genexp | list | listcomp | dict | set | dictcomp | setcomp | '...'"
        ],
        [
            "strings",
            "(fstring | string)+"
        ],
        [
            "fstring",
            "FSTRING_START (fstring_middle)* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' yield_expr | star_expressions ['='] [fstring_conversion] [fstring_full_format_spec] '}'"
        ],
        [
            "star_expressions",
            "star_expression (',' star_expression)+ [','] | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' (fstring_format_spec)*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "string",
            "STRING"
        ],
        [
            "tuple",
            "'(' [star_named_expression ',' [star_named_expressions]] ')'"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "named_expression",
            "assignment_expression | expression"
        ],
        [
            "star_named_expressions",
            "(',').(star_named_expression)+ [',']"
        ]
    ],
    "literal_expr": [
        [
            "literal_expr",
            "signed_number | complex_number | strings | 'None' | 'True' | 'False'"
        ],
        [
            "signed_number",
            "NUMBER | '-' NUMBER"
        ],
        [
            "complex_number",
            "signed_real_number '+' imaginary_number | signed_real_number '-' imaginary_number"
        ],
        [
            "signed_real_number",
            "real_number | '-' real_number"
        ],
        [
            "real_number",
            "NUMBER"
        ],
        [
            "imaginary_number",
            "NUMBER"
        ],
        [
            "strings",
            "(fstring | string)+"
        ],
        [
            "fstring",
            "FSTRING_START (fstring_middle)* FSTRING_END"
        ],
        [
            "fstring_middle",
            "fstring_replacement_field | FSTRING_MIDDLE"
        ],
        [
            "fstring_replacement_field",
            "'{' yield_expr | star_expressions ['='] [fstring_conversion] [fstring_full_format_spec] '}'"
        ],
        [
            "star_expressions",
            "star_expression (',' star_expression)+ [','] | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "fstring_conversion",
            "\"!\" NAME"
        ],
        [
            "fstring_full_format_spec",
            "':' (fstring_format_spec)*"
        ],
        [
            "fstring_format_spec",
            "FSTRING_MIDDLE | fstring_replacement_field"
        ],
        [
            "string",
            "STRING"
        ]
    ],
    "group": [
        [
            "group",
            "'(' yield_expr | named_expression ')'"
        ],
        [
            "named_expression",
            "assignment_expression | expression"
        ]
    ],
    "for_if_clauses": [
        [
            "for_if_clauses",
            "(for_if_clause)+"
        ],
        [
            "for_if_clause",
            "'async' 'for' star_targets 'in' disjunction ('if' disjunction)* | 'for' star_targets 'in' disjunction ('if' disjunction)*"
        ],
        [
            "star_targets",
            "star_target | star_target (',' star_target)* [',']"
        ],
        [
            "star_target",
            "'*' star_target | target_with_star_atom"
        ],
        [
            "target_with_star_atom",
            "t_primary '.' NAME | t_primary '[' slices ']' | star_atom"
        ],
        [
            "t_primary",
            "t_primary '.' NAME | t_primary '[' slices ']' | t_primary genexp | t_primary '(' [arguments] ')' | atom"
        ],
        [
            "t_lookahead",
            "'(' | '[' | '.'"
        ],
        [
            "arguments",
            "args [',']"
        ],
        [
            "args",
            "(',').(starred_expression | assignment_expression | expression)+ [',' kwargs] | kwargs"
        ],
        [
            "starred_expression",
            "'*' expression"
        ],
        [
            "kwargs",
            "(',').(kwarg_or_starred)+ ',' (',').(kwarg_or_double_starred)+ | (',').(kwarg_or_starred)+ | (',').(kwarg_or_double_starred)+"
        ],
        [
            "kwarg_or_starred",
            "NAME '=' expression | starred_expression"
        ],
        [
            "kwarg_or_double_starred",
            "NAME '=' expression | '**' expression"
        ],
        [
            "star_atom",
            "NAME | '(' target_with_star_atom ')' | '(' [star_targets_tuple_seq] ')' | '[' [star_targets_list_seq] ']'"
        ],
        [
            "star_targets_tuple_seq",
            "star_target (',' star_target)+ [','] | star_target ','"
        ],
        [
            "star_targets_list_seq",
            "(',').(star_target)+ [',']"
        ]
    ],
    "list": [
        [
            "list",
            "'[' [star_named_expressions] ']'"
        ],
        [
            "star_named_expressions",
            "(',').(star_named_expression)+ [',']"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "named_expression",
            "assignment_expression | expression"
        ]
    ],
    "listcomp": [
        [
            "listcomp",
            "'[' named_expression for_if_clauses ']'"
        ],
        [
            "named_expression",
            "assignment_expression | expression"
        ]
    ],
    "set": [
        [
            "set",
            "'{' star_named_expressions '}'"
        ],
        [
            "star_named_expressions",
            "(',').(star_named_expression)+ [',']"
        ],
        [
            "star_named_expression",
            "'*' bitwise_or | named_expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "named_expression",
            "assignment_expression | expression"
        ]
    ],
    "setcomp": [
        [
            "setcomp",
            "'{' named_expression for_if_clauses '}'"
        ],
        [
            "named_expression",
            "assignment_expression | expression"
        ]
    ],
    "dict": [
        [
            "dict",
            "'{' [double_starred_kvpairs] '}'"
        ],
        [
            "double_starred_kvpairs",
            "(',').(double_starred_kvpair)+ [',']"
        ],
        [
            "double_starred_kvpair",
            "'**' bitwise_or | kvpair"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "kvpair",
            "expression ':' expression"
        ]
    ],
    "dictcomp": [
        [
            "dictcomp",
            "'{' kvpair for_if_clauses '}'"
        ],
        [
            "kvpair",
            "expression ':' expression"
        ]
    ],
    "genexp": [
        [
            "genexp",
            "'(' assignment_expression | expression for_if_clauses ')'"
        ]
    ],
    "yield_expr": [
        [
            "yield_expr",
            "'yield' 'from' expression | 'yield' [star_expressions]"
        ],
        [
            "star_expressions",
            "star_expression (',' star_expression)+ [','] | star_expression ',' | star_expression"
        ],
        [
            "star_expression",
            "'*' bitwise_or | expression"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ]
    ],
    "primary": [
        [
            "primary",
            "attributeref | primary genexp | call | subscription | atom"
        ]
    ],
    "attributeref": [
        [
            "attributeref",
            "primary '.' NAME"
        ]
    ],
    "subscription": [
        [
            "subscription",
            "primary '[' slices ']'"
        ]
    ],
    "slices": [
        [
            "slices",
            "expr_or_slice | (',').(expr_or_slice | starred_expression)+ [',']"
        ],
        [
            "expr_or_slice",
            "slice | named_expression"
        ],
        [
            "slice",
            "[expression] ':' [expression] [':' [expression]]"
        ],
        [
            "named_expression",
            "assignment_expression | expression"
        ],
        [
            "starred_expression",
            "'*' expression"
        ]
    ],
    "call": [
        [
            "call",
            "primary '(' [arguments] ')'"
        ],
        [
            "arguments",
            "args [',']"
        ],
        [
            "args",
            "(',').(starred_expression | assignment_expression | expression)+ [',' kwargs] | kwargs"
        ],
        [
            "starred_expression",
            "'*' expression"
        ],
        [
            "kwargs",
            "(',').(kwarg_or_starred)+ ',' (',').(kwarg_or_double_starred)+ | (',').(kwarg_or_starred)+ | (',').(kwarg_or_double_starred)+"
        ],
        [
            "kwarg_or_starred",
            "NAME '=' expression | starred_expression"
        ],
        [
            "kwarg_or_double_starred",
            "NAME '=' expression | '**' expression"
        ]
    ],
    "await_primary": [
        [
            "await_primary",
            "'await' primary | primary"
        ]
    ],
    "power": [
        [
            "power",
            "await_primary '**' factor | await_primary"
        ]
    ],
    "factor": [
        [
            "factor",
            "'+' factor | '-' factor | '~' factor | power"
        ]
    ],
    "term": [
        [
            "term",
            "term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor"
        ]
    ],
    "shift_expr": [
        [
            "shift_expr",
            "shift_expr '<<' sum | shift_expr '>>' sum | sum"
        ],
        [
            "sum",
            "sum '+' term | sum '-' term | term"
        ]
    ],
    "bitwise_and": [
        [
            "bitwise_and",
            "bitwise_and '&' shift_expr | shift_expr"
        ]
    ],
    "comparison": [
        [
            "comparison",
            "bitwise_or (compare_op_bitwise_or_pair)+ | bitwise_or"
        ],
        [
            "bitwise_or",
            "bitwise_or '|' bitwise_xor | bitwise_xor"
        ],
        [
            "bitwise_xor",
            "bitwise_xor '^' bitwise_and | bitwise_and"
        ],
        [
            "compare_op_bitwise_or_pair",
            "eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or"
        ],
        [
            "eq_bitwise_or",
            "'==' bitwise_or"
        ],
        [
            "noteq_bitwise_or",
            "'!=' bitwise_or"
        ],
        [
            "lte_bitwise_or",
            "'<=' bitwise_or"
        ],
        [
            "lt_bitwise_or",
            "'<' bitwise_or"
        ],
        [
            "gte_bitwise_or",
            "'>=' bitwise_or"
        ],
        [
            "gt_bitwise_or",
            "'>' bitwise_or"
        ],
        [
            "notin_bitwise_or",
            "'not' 'in' bitwise_or"
        ],
        [
            "in_bitwise_or",
            "'in' bitwise_or"
        ],
        [
            "isnot_bitwise_or",
            "'is' 'not' bitwise_or"
        ],
        [
            "is_bitwise_or",
            "'is' bitwise_or"
        ]
    ],
    "disjunction": [
        [
            "disjunction",
            "conjunction ('or' conjunction)+ | conjunction"
        ],
        [
            "conjunction",
            "inversion ('and' inversion)+ | inversion"
        ],
        [
            "inversion",
            "'not' inversion | comparison"
        ]
    ],
    "assignment_expression": [
        [
            "assignment_expression",
            "NAME ':=' expression"
        ]
    ],
    "conditional_expression": [
        [
            "conditional_expression",
            "disjunction 'if' disjunction 'else' expression"
        ]
    ],
    "lambdef": [
        [
            "lambdef",
            "'lambda' [lambda_params] ':' expression"
        ],
        [
            "lambda_params",
            "lambda_parameters"
        ],
        [
            "lambda_parameters",
            "lambda_slash_no_default (lambda_param_no_default)* (lambda_param_with_default)* [lambda_star_etc] | lambda_slash_with_default (lambda_param_with_default)* [lambda_star_etc] | (lambda_param_no_default)+ (lambda_param_with_default)* [lambda_star_etc] | (lambda_param_with_default)+ [lambda_star_etc] | lambda_star_etc"
        ],
        [
            "lambda_slash_no_default",
            "(lambda_param_no_default)+ '/' ',' | (lambda_param_no_default)+ '/'"
        ],
        [
            "lambda_param_no_default",
            "lambda_param ',' | lambda_param"
        ],
        [
            "lambda_param",
            "NAME"
        ],
        [
            "lambda_param_with_default",
            "lambda_param default ',' | lambda_param default"
        ],
        [
            "default",
            "'=' expression"
        ],
        [
            "lambda_star_etc",
            "'*' lambda_param_no_default (lambda_param_maybe_default)* [lambda_kwds] | '*' ',' (lambda_param_maybe_default)+ [lambda_kwds] | lambda_kwds"
        ],
        [
            "lambda_param_maybe_default",
            "lambda_param [default] ',' | lambda_param [default]"
        ],
        [
            "lambda_kwds",
            "'**' lambda_param_no_default"
        ],
        [
            "lambda_slash_with_default",
            "(lambda_param_no_default)* (lambda_param_with_default)+ '/' ',' | (lambda_param_no_default)* (lambda_param_with_default)+ '/'"
        ]
    ],
    "expressions": [
        [
            "expressions",
            "expression (',' expression)+ [','] | expression ',' | expression"
        ]
    ]
}